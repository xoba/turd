// THIS FILE IS AUTOGENERATED, DO NOT EDIT!

package main

import (
	"bytes"
	"fmt"
	"strings"
)

var env Exp

func main() {

	show := func(msg string, e Exp) {
		fmt.Printf("%s: %s\n", msg, StringLazy(e, true))
	}
	show("1", quote("howdy"))

	show("2", atom(quote("howdy")))
	show("11", atom(list("quote", "a")))
	show("12", atom("x"))

	show("3", apply(atom, apply(quote, "howdy")))
	show("4", atom(list()))
	show("5", atom(list("a")))
	show("6", eq("a", "a"))
	show("7", eq("a", "b"))

	f1 := and("t", "t")

	show("14", f1)
	show("15", and("t", list()))

	lazy := func(e Exp) Lazy {
		return Lazy(func() Exp {
			return e
		})
	}

	show("8", cond(
		list(lazy(True), lazy(quote("a"))),
		list(lazy(True), lazy(quote("b"))),
	))
	show("9", cond(
		list(lazy(False), lazy(quote("a"))),
		list(lazy(True), lazy(quote("b"))),
	))

	show("10", cons("a", list("b", "c")))

	e, a := list("quote", "x"), Nil
	show("13", apply(
		atom,
		e,
	))
	show("12", eval(e, a))
}

type Exp interface{}

func String(e Exp) string {
	return StringLazy(e, false)
}

func StringLazy(e Exp, evalLazy bool) string {
	show := func(f func(...Exp) Exp) string {
		if evalLazy {
			v := f()
			return String(v)
		}
		return String(e)
	}
	w := new(bytes.Buffer)
	switch t := e.(type) {
	case string:
		fmt.Fprint(w, t)
	case Lazy:
		return show(func(...Exp) Exp {
			return t()
		})
	case func() Exp:
		return show(func(...Exp) Exp {
			return t()
		})
	case Func:
		return show(func(...Exp) Exp {
			return t()
		})
	case []Exp:
		var list []string
		for e := range t {
			list = append(list, String(e))
		}
		fmt.Fprintf(w, "(%s)", strings.Join(list, " "))
	default:
		panic(fmt.Errorf("can't stringify type %T %v", t, t))
	}
	return w.String()
}

type Func func(...Exp) Exp

type Lazy func() Exp

var (
	Nil    Exp  = list()
	True   Exp  = "t"
	False  Exp  = Nil
	t      Func = nil
	lambda Exp  = "lambda"
	label  Exp  = "label"
)

func IsAtom(e Exp) bool {
	switch e.(type) {
	case string:
		return true
	default:
		return false
	}
}

func apply(f Func, args ...Exp) Exp {
	return f(args...)
}

func checklen(n int, args []Exp) {
	if len(args) != n {
		panic(fmt.Errorf("len = %d vs %d", len(args), n))
	}
}

func list(args ...Exp) Exp {
	return args
}

func boolean(e Exp) bool {
	return fmt.Sprintf("%v", e) == "t"
}

// ----------------------------------------------------------------------
// AXIOMS
// ----------------------------------------------------------------------

//
// #1
//
func quote(args ...Exp) Exp {
	checklen(1, args)
	return args[0]
}

//
// #2
//

func atom(args ...Exp) Exp {
	checklen(1, args)
	if len(args) != 1 {
		panic("args")
	}
	switch t := args[0].(type) {
	case string:
		return True
	case []Exp:
		if len(t) == 0 {
			return True
		}
		return False
	default:
		return False
	}
}

//
// #3
//

func eq(args ...Exp) Exp {
	checklen(2, args)
	s := func(e Exp) string {
		return fmt.Sprintf("%s", e)
	}
	if s(args[0]) == s(args[1]) {
		return True
	}
	return False
}

//
// #4
//

func car(args ...Exp) Exp {
	checklen(1, args)
	return args[0]
}

//
// #5
//

func cdr(args ...Exp) Exp {
	checklen(1, args)
	return args[1:]
}

//
// #6
//

func cons(args ...Exp) Exp {
	checklen(2, args)
	x, y := args[0], args[1]
	if IsAtom(y) {
		panic("cons to atom")
	}
	slice := y.([]Exp)
	var out []Exp
	out = append(out, x)
	out = append(out, slice...)
	return out
}

//
// #7
//

func cond(args ...Exp) Exp {
	for i, a := range args {
		switch t := a.(type) {
		case []Exp:
			if len(t) != 2 {
				panic(fmt.Errorf("len[%d] = %d", i, len(t)))
			}
			p, e := t[0], t[1]
			fmt.Printf("p,e = %s, %s\n", String(p), String(e))
			pl, ok := p.(func() Exp)
			if !ok {
				panic("p not lazy")
			}
			if boolean(pl()) {
				el, ok := e.(func() Exp)
				if !ok {
					panic("e not lazy")
				}
				return el()
			}
		default:
			panic(fmt.Errorf("cond %T", t))
		}
	}
	panic("cond")
}

//
// #8
//

func display(args ...Exp) Exp {
	checklen(1, args)
	a := args[0]
	fmt.Printf("(display %s)\n", a)
	return a
}

var env_and = list(quote("and"), list(quote("label"), quote("and"), list(quote("lambda"), list(quote("x"), quote("y")), list(quote("cond"), list(quote("x"), list(quote("cond"), list(quote("y"), list(quote("quote"), quote("t"))), list(list(quote("quote"), quote("t")), list()))), list(list(quote("quote"), quote("t")), list(quote("quote"), list()))))))

func and(args ...Exp) Exp {
	checklen(2, args)
	x := args[0]
	y := args[1]
	return apply(
		cond,
		list(
			func() Exp {
				return x
			},
			func() Exp {
				return apply(
					cond,
					list(
						func() Exp {
							return y
						},
						func() Exp {
							return apply(
								quote,
								t,
							)
						},
					),
					list(
						func() Exp {
							return apply(
								quote,
								t,
							)
						},
						func() Exp {
							return Nil
						},
					),
				)
			},
		),
		list(
			func() Exp {
				return apply(
					quote,
					t,
				)
			},
			func() Exp {
				return apply(
					quote,
					Nil,
				)
			},
		),
	)
}

var env_xappend = list(quote("xappend"), list(quote("label"), quote("xappend"), list(quote("lambda"), list(quote("x"), quote("y")), list(quote("cond"), list(list(quote("null"), quote("x")), quote("y")), list(list(quote("quote"), quote("t")), list(quote("cons"), list(quote("car"), quote("x")), list(quote("xappend"), list(quote("cdr"), quote("x")), quote("y"))))))))

func xappend(args ...Exp) Exp {
	checklen(2, args)
	x := args[0]
	y := args[1]
	return apply(
		cond,
		list(
			func() Exp {
				return apply(
					null,
					x,
				)
			},
			func() Exp {
				return y
			},
		),
		list(
			func() Exp {
				return apply(
					quote,
					t,
				)
			},
			func() Exp {
				return apply(
					cons,
					apply(
						car,
						x,
					),
					apply(
						xappend,
						apply(
							cdr,
							x,
						),
						y,
					),
				)
			},
		),
	)
}

var env_assoc = list(quote("assoc"), list(quote("label"), quote("assoc"), list(quote("lambda"), list(quote("x"), quote("y")), list(quote("cond"), list(list(quote("eq"), list(quote("caar"), quote("y")), quote("x")), list(quote("cadar"), quote("y"))), list(list(quote("quote"), quote("t")), list(quote("assoc"), quote("x"), list(quote("cdr"), quote("y"))))))))

func assoc(args ...Exp) Exp {
	checklen(2, args)
	x := args[0]
	y := args[1]
	return apply(
		cond,
		list(
			func() Exp {
				return apply(
					eq,
					apply(
						caar,
						y,
					),
					x,
				)
			},
			func() Exp {
				return apply(
					cadar,
					y,
				)
			},
		),
		list(
			func() Exp {
				return apply(
					quote,
					t,
				)
			},
			func() Exp {
				return apply(
					assoc,
					x,
					apply(
						cdr,
						y,
					),
				)
			},
		),
	)
}

var env_caaaar = list(quote("caaaar"), list(quote("label"), quote("caaaar"), list(quote("lambda"), list(quote("x")), list(quote("car"), list(quote("car"), list(quote("car"), list(quote("car"), quote("x"))))))))

func caaaar(args ...Exp) Exp {
	checklen(1, args)
	x := args[0]
	return apply(
		car,
		apply(
			car,
			apply(
				car,
				apply(
					car,
					x,
				),
			),
		),
	)
}

var env_caaadr = list(quote("caaadr"), list(quote("label"), quote("caaadr"), list(quote("lambda"), list(quote("x")), list(quote("car"), list(quote("car"), list(quote("car"), list(quote("cdr"), quote("x"))))))))

func caaadr(args ...Exp) Exp {
	checklen(1, args)
	x := args[0]
	return apply(
		car,
		apply(
			car,
			apply(
				car,
				apply(
					cdr,
					x,
				),
			),
		),
	)
}

var env_caaar = list(quote("caaar"), list(quote("label"), quote("caaar"), list(quote("lambda"), list(quote("x")), list(quote("car"), list(quote("car"), list(quote("car"), quote("x")))))))

func caaar(args ...Exp) Exp {
	checklen(1, args)
	x := args[0]
	return apply(
		car,
		apply(
			car,
			apply(
				car,
				x,
			),
		),
	)
}

var env_caadar = list(quote("caadar"), list(quote("label"), quote("caadar"), list(quote("lambda"), list(quote("x")), list(quote("car"), list(quote("car"), list(quote("cdr"), list(quote("car"), quote("x"))))))))

func caadar(args ...Exp) Exp {
	checklen(1, args)
	x := args[0]
	return apply(
		car,
		apply(
			car,
			apply(
				cdr,
				apply(
					car,
					x,
				),
			),
		),
	)
}

var env_caaddr = list(quote("caaddr"), list(quote("label"), quote("caaddr"), list(quote("lambda"), list(quote("x")), list(quote("car"), list(quote("car"), list(quote("cdr"), list(quote("cdr"), quote("x"))))))))

func caaddr(args ...Exp) Exp {
	checklen(1, args)
	x := args[0]
	return apply(
		car,
		apply(
			car,
			apply(
				cdr,
				apply(
					cdr,
					x,
				),
			),
		),
	)
}

var env_caadr = list(quote("caadr"), list(quote("label"), quote("caadr"), list(quote("lambda"), list(quote("x")), list(quote("car"), list(quote("car"), list(quote("cdr"), quote("x")))))))

func caadr(args ...Exp) Exp {
	checklen(1, args)
	x := args[0]
	return apply(
		car,
		apply(
			car,
			apply(
				cdr,
				x,
			),
		),
	)
}

var env_caar = list(quote("caar"), list(quote("label"), quote("caar"), list(quote("lambda"), list(quote("x")), list(quote("car"), list(quote("car"), quote("x"))))))

func caar(args ...Exp) Exp {
	checklen(1, args)
	x := args[0]
	return apply(
		car,
		apply(
			car,
			x,
		),
	)
}

var env_cadaar = list(quote("cadaar"), list(quote("label"), quote("cadaar"), list(quote("lambda"), list(quote("x")), list(quote("car"), list(quote("cdr"), list(quote("car"), list(quote("car"), quote("x"))))))))

func cadaar(args ...Exp) Exp {
	checklen(1, args)
	x := args[0]
	return apply(
		car,
		apply(
			cdr,
			apply(
				car,
				apply(
					car,
					x,
				),
			),
		),
	)
}

var env_cadadr = list(quote("cadadr"), list(quote("label"), quote("cadadr"), list(quote("lambda"), list(quote("x")), list(quote("car"), list(quote("cdr"), list(quote("car"), list(quote("cdr"), quote("x"))))))))

func cadadr(args ...Exp) Exp {
	checklen(1, args)
	x := args[0]
	return apply(
		car,
		apply(
			cdr,
			apply(
				car,
				apply(
					cdr,
					x,
				),
			),
		),
	)
}

var env_cadar = list(quote("cadar"), list(quote("label"), quote("cadar"), list(quote("lambda"), list(quote("x")), list(quote("car"), list(quote("cdr"), list(quote("car"), quote("x")))))))

func cadar(args ...Exp) Exp {
	checklen(1, args)
	x := args[0]
	return apply(
		car,
		apply(
			cdr,
			apply(
				car,
				x,
			),
		),
	)
}

var env_caddar = list(quote("caddar"), list(quote("label"), quote("caddar"), list(quote("lambda"), list(quote("x")), list(quote("car"), list(quote("cdr"), list(quote("cdr"), list(quote("car"), quote("x"))))))))

func caddar(args ...Exp) Exp {
	checklen(1, args)
	x := args[0]
	return apply(
		car,
		apply(
			cdr,
			apply(
				cdr,
				apply(
					car,
					x,
				),
			),
		),
	)
}

var env_cadddr = list(quote("cadddr"), list(quote("label"), quote("cadddr"), list(quote("lambda"), list(quote("x")), list(quote("car"), list(quote("cdr"), list(quote("cdr"), list(quote("cdr"), quote("x"))))))))

func cadddr(args ...Exp) Exp {
	checklen(1, args)
	x := args[0]
	return apply(
		car,
		apply(
			cdr,
			apply(
				cdr,
				apply(
					cdr,
					x,
				),
			),
		),
	)
}

var env_caddr = list(quote("caddr"), list(quote("label"), quote("caddr"), list(quote("lambda"), list(quote("x")), list(quote("car"), list(quote("cdr"), list(quote("cdr"), quote("x")))))))

func caddr(args ...Exp) Exp {
	checklen(1, args)
	x := args[0]
	return apply(
		car,
		apply(
			cdr,
			apply(
				cdr,
				x,
			),
		),
	)
}

var env_cadr = list(quote("cadr"), list(quote("label"), quote("cadr"), list(quote("lambda"), list(quote("x")), list(quote("car"), list(quote("cdr"), quote("x"))))))

func cadr(args ...Exp) Exp {
	checklen(1, args)
	x := args[0]
	return apply(
		car,
		apply(
			cdr,
			x,
		),
	)
}

var env_cdaaar = list(quote("cdaaar"), list(quote("label"), quote("cdaaar"), list(quote("lambda"), list(quote("x")), list(quote("cdr"), list(quote("car"), list(quote("car"), list(quote("car"), quote("x"))))))))

func cdaaar(args ...Exp) Exp {
	checklen(1, args)
	x := args[0]
	return apply(
		cdr,
		apply(
			car,
			apply(
				car,
				apply(
					car,
					x,
				),
			),
		),
	)
}

var env_cdaadr = list(quote("cdaadr"), list(quote("label"), quote("cdaadr"), list(quote("lambda"), list(quote("x")), list(quote("cdr"), list(quote("car"), list(quote("car"), list(quote("cdr"), quote("x"))))))))

func cdaadr(args ...Exp) Exp {
	checklen(1, args)
	x := args[0]
	return apply(
		cdr,
		apply(
			car,
			apply(
				car,
				apply(
					cdr,
					x,
				),
			),
		),
	)
}

var env_cdaar = list(quote("cdaar"), list(quote("label"), quote("cdaar"), list(quote("lambda"), list(quote("x")), list(quote("cdr"), list(quote("car"), list(quote("car"), quote("x")))))))

func cdaar(args ...Exp) Exp {
	checklen(1, args)
	x := args[0]
	return apply(
		cdr,
		apply(
			car,
			apply(
				car,
				x,
			),
		),
	)
}

var env_cdadar = list(quote("cdadar"), list(quote("label"), quote("cdadar"), list(quote("lambda"), list(quote("x")), list(quote("cdr"), list(quote("car"), list(quote("cdr"), list(quote("car"), quote("x"))))))))

func cdadar(args ...Exp) Exp {
	checklen(1, args)
	x := args[0]
	return apply(
		cdr,
		apply(
			car,
			apply(
				cdr,
				apply(
					car,
					x,
				),
			),
		),
	)
}

var env_cdaddr = list(quote("cdaddr"), list(quote("label"), quote("cdaddr"), list(quote("lambda"), list(quote("x")), list(quote("cdr"), list(quote("car"), list(quote("cdr"), list(quote("cdr"), quote("x"))))))))

func cdaddr(args ...Exp) Exp {
	checklen(1, args)
	x := args[0]
	return apply(
		cdr,
		apply(
			car,
			apply(
				cdr,
				apply(
					cdr,
					x,
				),
			),
		),
	)
}

var env_cdadr = list(quote("cdadr"), list(quote("label"), quote("cdadr"), list(quote("lambda"), list(quote("x")), list(quote("cdr"), list(quote("car"), list(quote("cdr"), quote("x")))))))

func cdadr(args ...Exp) Exp {
	checklen(1, args)
	x := args[0]
	return apply(
		cdr,
		apply(
			car,
			apply(
				cdr,
				x,
			),
		),
	)
}

var env_cdar = list(quote("cdar"), list(quote("label"), quote("cdar"), list(quote("lambda"), list(quote("x")), list(quote("cdr"), list(quote("car"), quote("x"))))))

func cdar(args ...Exp) Exp {
	checklen(1, args)
	x := args[0]
	return apply(
		cdr,
		apply(
			car,
			x,
		),
	)
}

var env_cddaar = list(quote("cddaar"), list(quote("label"), quote("cddaar"), list(quote("lambda"), list(quote("x")), list(quote("cdr"), list(quote("cdr"), list(quote("car"), list(quote("car"), quote("x"))))))))

func cddaar(args ...Exp) Exp {
	checklen(1, args)
	x := args[0]
	return apply(
		cdr,
		apply(
			cdr,
			apply(
				car,
				apply(
					car,
					x,
				),
			),
		),
	)
}

var env_cddadr = list(quote("cddadr"), list(quote("label"), quote("cddadr"), list(quote("lambda"), list(quote("x")), list(quote("cdr"), list(quote("cdr"), list(quote("car"), list(quote("cdr"), quote("x"))))))))

func cddadr(args ...Exp) Exp {
	checklen(1, args)
	x := args[0]
	return apply(
		cdr,
		apply(
			cdr,
			apply(
				car,
				apply(
					cdr,
					x,
				),
			),
		),
	)
}

var env_cddar = list(quote("cddar"), list(quote("label"), quote("cddar"), list(quote("lambda"), list(quote("x")), list(quote("cdr"), list(quote("cdr"), list(quote("car"), quote("x")))))))

func cddar(args ...Exp) Exp {
	checklen(1, args)
	x := args[0]
	return apply(
		cdr,
		apply(
			cdr,
			apply(
				car,
				x,
			),
		),
	)
}

var env_cdddar = list(quote("cdddar"), list(quote("label"), quote("cdddar"), list(quote("lambda"), list(quote("x")), list(quote("cdr"), list(quote("cdr"), list(quote("cdr"), list(quote("car"), quote("x"))))))))

func cdddar(args ...Exp) Exp {
	checklen(1, args)
	x := args[0]
	return apply(
		cdr,
		apply(
			cdr,
			apply(
				cdr,
				apply(
					car,
					x,
				),
			),
		),
	)
}

var env_cddddr = list(quote("cddddr"), list(quote("label"), quote("cddddr"), list(quote("lambda"), list(quote("x")), list(quote("cdr"), list(quote("cdr"), list(quote("cdr"), list(quote("cdr"), quote("x"))))))))

func cddddr(args ...Exp) Exp {
	checklen(1, args)
	x := args[0]
	return apply(
		cdr,
		apply(
			cdr,
			apply(
				cdr,
				apply(
					cdr,
					x,
				),
			),
		),
	)
}

var env_cdddr = list(quote("cdddr"), list(quote("label"), quote("cdddr"), list(quote("lambda"), list(quote("x")), list(quote("cdr"), list(quote("cdr"), list(quote("cdr"), quote("x")))))))

func cdddr(args ...Exp) Exp {
	checklen(1, args)
	x := args[0]
	return apply(
		cdr,
		apply(
			cdr,
			apply(
				cdr,
				x,
			),
		),
	)
}

var env_cddr = list(quote("cddr"), list(quote("label"), quote("cddr"), list(quote("lambda"), list(quote("x")), list(quote("cdr"), list(quote("cdr"), quote("x"))))))

func cddr(args ...Exp) Exp {
	checklen(1, args)
	x := args[0]
	return apply(
		cdr,
		apply(
			cdr,
			x,
		),
	)
}

var env_eval = list(quote("eval"), list(quote("label"), quote("eval"), list(quote("lambda"), list(quote("e"), quote("a")), list(quote("cond"), list(list(quote("atom"), quote("e")), list(quote("assoc"), quote("e"), quote("a"))), list(list(quote("atom"), list(quote("car"), quote("e"))), list(quote("cond"), list(list(quote("eq"), list(quote("car"), quote("e")), list(quote("quote"), quote("quote"))), list(quote("cadr"), quote("e"))), list(list(quote("eq"), list(quote("car"), quote("e")), list(quote("quote"), quote("atom"))), list(quote("atom"), list(quote("eval"), list(quote("cadr"), quote("e")), quote("a")))), list(list(quote("eq"), list(quote("car"), quote("e")), list(quote("quote"), quote("eq"))), list(quote("eq"), list(quote("eval"), list(quote("cadr"), quote("e")), quote("a")), list(quote("eval"), list(quote("caddr"), quote("e")), quote("a")))), list(list(quote("eq"), list(quote("car"), quote("e")), list(quote("quote"), quote("display"))), list(quote("display"), list(quote("eval"), list(quote("cadr"), quote("e")), quote("a")))), list(list(quote("eq"), list(quote("car"), quote("e")), list(quote("quote"), quote("car"))), list(quote("car"), list(quote("eval"), list(quote("cadr"), quote("e")), quote("a")))), list(list(quote("eq"), list(quote("car"), quote("e")), list(quote("quote"), quote("cdr"))), list(quote("cdr"), list(quote("eval"), list(quote("cadr"), quote("e")), quote("a")))), list(list(quote("eq"), list(quote("car"), quote("e")), list(quote("quote"), quote("cons"))), list(quote("cons"), list(quote("eval"), list(quote("cadr"), quote("e")), quote("a")), list(quote("eval"), list(quote("caddr"), quote("e")), quote("a")))), list(list(quote("eq"), list(quote("car"), quote("e")), list(quote("quote"), quote("cond"))), list(quote("evcon"), list(quote("cdr"), quote("e")), quote("a"))), list(list(quote("quote"), quote("t")), list(quote("eval"), list(quote("cons"), list(quote("assoc"), list(quote("car"), quote("e")), quote("a")), list(quote("cdr"), quote("e"))), quote("a"))))), list(list(quote("eq"), list(quote("caar"), quote("e")), list(quote("quote"), quote("label"))), list(quote("eval"), list(quote("cons"), list(quote("caddar"), quote("e")), list(quote("cdr"), quote("e"))), list(quote("cons"), list(quote("list"), list(quote("cadar"), quote("e")), list(quote("car"), quote("e"))), quote("a")))), list(list(quote("eq"), list(quote("caar"), quote("e")), list(quote("quote"), quote("lambda"))), list(quote("eval"), list(quote("caddar"), quote("e")), list(quote("xappend"), list(quote("pair"), list(quote("cadar"), quote("e")), list(quote("evlis"), list(quote("cdr"), quote("e")), quote("a"))), quote("a"))))))))

func eval(args ...Exp) Exp {
	checklen(2, args)
	e := args[0]
	a := args[1]
	return apply(
		cond,
		list(
			func() Exp {
				return apply(
					atom,
					e,
				)
			},
			func() Exp {
				return apply(
					assoc,
					e,
					a,
				)
			},
		),
		list(
			func() Exp {
				return apply(
					atom,
					apply(
						car,
						e,
					),
				)
			},
			func() Exp {
				return apply(
					cond,
					list(
						func() Exp {
							return apply(
								eq,
								apply(
									car,
									e,
								),
								apply(
									quote,
									quote,
								),
							)
						},
						func() Exp {
							return apply(
								cadr,
								e,
							)
						},
					),
					list(
						func() Exp {
							return apply(
								eq,
								apply(
									car,
									e,
								),
								apply(
									quote,
									atom,
								),
							)
						},
						func() Exp {
							return apply(
								atom,
								apply(
									eval,
									apply(
										cadr,
										e,
									),
									a,
								),
							)
						},
					),
					list(
						func() Exp {
							return apply(
								eq,
								apply(
									car,
									e,
								),
								apply(
									quote,
									eq,
								),
							)
						},
						func() Exp {
							return apply(
								eq,
								apply(
									eval,
									apply(
										cadr,
										e,
									),
									a,
								),
								apply(
									eval,
									apply(
										caddr,
										e,
									),
									a,
								),
							)
						},
					),
					list(
						func() Exp {
							return apply(
								eq,
								apply(
									car,
									e,
								),
								apply(
									quote,
									display,
								),
							)
						},
						func() Exp {
							return apply(
								display,
								apply(
									eval,
									apply(
										cadr,
										e,
									),
									a,
								),
							)
						},
					),
					list(
						func() Exp {
							return apply(
								eq,
								apply(
									car,
									e,
								),
								apply(
									quote,
									car,
								),
							)
						},
						func() Exp {
							return apply(
								car,
								apply(
									eval,
									apply(
										cadr,
										e,
									),
									a,
								),
							)
						},
					),
					list(
						func() Exp {
							return apply(
								eq,
								apply(
									car,
									e,
								),
								apply(
									quote,
									cdr,
								),
							)
						},
						func() Exp {
							return apply(
								cdr,
								apply(
									eval,
									apply(
										cadr,
										e,
									),
									a,
								),
							)
						},
					),
					list(
						func() Exp {
							return apply(
								eq,
								apply(
									car,
									e,
								),
								apply(
									quote,
									cons,
								),
							)
						},
						func() Exp {
							return apply(
								cons,
								apply(
									eval,
									apply(
										cadr,
										e,
									),
									a,
								),
								apply(
									eval,
									apply(
										caddr,
										e,
									),
									a,
								),
							)
						},
					),
					list(
						func() Exp {
							return apply(
								eq,
								apply(
									car,
									e,
								),
								apply(
									quote,
									cond,
								),
							)
						},
						func() Exp {
							return apply(
								evcon,
								apply(
									cdr,
									e,
								),
								a,
							)
						},
					),
					list(
						func() Exp {
							return apply(
								quote,
								t,
							)
						},
						func() Exp {
							return apply(
								eval,
								apply(
									cons,
									apply(
										assoc,
										apply(
											car,
											e,
										),
										a,
									),
									apply(
										cdr,
										e,
									),
								),
								a,
							)
						},
					),
				)
			},
		),
		list(
			func() Exp {
				return apply(
					eq,
					apply(
						caar,
						e,
					),
					apply(
						quote,
						label,
					),
				)
			},
			func() Exp {
				return apply(
					eval,
					apply(
						cons,
						apply(
							caddar,
							e,
						),
						apply(
							cdr,
							e,
						),
					),
					apply(
						cons,
						apply(
							list,
							apply(
								cadar,
								e,
							),
							apply(
								car,
								e,
							),
						),
						a,
					),
				)
			},
		),
		list(
			func() Exp {
				return apply(
					eq,
					apply(
						caar,
						e,
					),
					apply(
						quote,
						lambda,
					),
				)
			},
			func() Exp {
				return apply(
					eval,
					apply(
						caddar,
						e,
					),
					apply(
						xappend,
						apply(
							pair,
							apply(
								cadar,
								e,
							),
							apply(
								evlis,
								apply(
									cdr,
									e,
								),
								a,
							),
						),
						a,
					),
				)
			},
		),
	)
}

var env_evcon = list(quote("evcon"), list(quote("label"), quote("evcon"), list(quote("lambda"), list(quote("c"), quote("a")), list(quote("cond"), list(list(quote("eval"), list(quote("caar"), quote("c")), quote("a")), list(quote("eval"), list(quote("cadar"), quote("c")), quote("a"))), list(list(quote("quote"), quote("t")), list(quote("evcon"), list(quote("cdr"), quote("c")), quote("a")))))))

func evcon(args ...Exp) Exp {
	checklen(2, args)
	c := args[0]
	a := args[1]
	return apply(
		cond,
		list(
			func() Exp {
				return apply(
					eval,
					apply(
						caar,
						c,
					),
					a,
				)
			},
			func() Exp {
				return apply(
					eval,
					apply(
						cadar,
						c,
					),
					a,
				)
			},
		),
		list(
			func() Exp {
				return apply(
					quote,
					t,
				)
			},
			func() Exp {
				return apply(
					evcon,
					apply(
						cdr,
						c,
					),
					a,
				)
			},
		),
	)
}

var env_evlis = list(quote("evlis"), list(quote("label"), quote("evlis"), list(quote("lambda"), list(quote("m"), quote("a")), list(quote("cond"), list(list(quote("null"), quote("m")), list(quote("quote"), list())), list(list(quote("quote"), quote("t")), list(quote("cons"), list(quote("eval"), list(quote("car"), quote("m")), quote("a")), list(quote("evlis"), list(quote("cdr"), quote("m")), quote("a"))))))))

func evlis(args ...Exp) Exp {
	checklen(2, args)
	m := args[0]
	a := args[1]
	return apply(
		cond,
		list(
			func() Exp {
				return apply(
					null,
					m,
				)
			},
			func() Exp {
				return apply(
					quote,
					Nil,
				)
			},
		),
		list(
			func() Exp {
				return apply(
					quote,
					t,
				)
			},
			func() Exp {
				return apply(
					cons,
					apply(
						eval,
						apply(
							car,
							m,
						),
						a,
					),
					apply(
						evlis,
						apply(
							cdr,
							m,
						),
						a,
					),
				)
			},
		),
	)
}

var env_not = list(quote("not"), list(quote("label"), quote("not"), list(quote("lambda"), list(quote("x")), list(quote("cond"), list(quote("x"), list(quote("quote"), list())), list(list(quote("quote"), quote("t")), list(quote("quote"), quote("t")))))))

func not(args ...Exp) Exp {
	checklen(1, args)
	x := args[0]
	return apply(
		cond,
		list(
			func() Exp {
				return x
			},
			func() Exp {
				return apply(
					quote,
					Nil,
				)
			},
		),
		list(
			func() Exp {
				return apply(
					quote,
					t,
				)
			},
			func() Exp {
				return apply(
					quote,
					t,
				)
			},
		),
	)
}

var env_null = list(quote("null"), list(quote("label"), quote("null"), list(quote("lambda"), list(quote("x")), list(quote("eq"), quote("x"), list(quote("quote"), list())))))

func null(args ...Exp) Exp {
	checklen(1, args)
	x := args[0]
	return apply(
		eq,
		x,
		apply(
			quote,
			Nil,
		),
	)
}

var env_pair = list(quote("pair"), list(quote("label"), quote("pair"), list(quote("lambda"), list(quote("x"), quote("y")), list(quote("cond"), list(list(quote("and"), list(quote("null"), quote("x")), list(quote("null"), quote("y"))), list(quote("quote"), list())), list(list(quote("and"), list(quote("not"), list(quote("atom"), quote("x"))), list(quote("not"), list(quote("atom"), quote("y")))), list(quote("cons"), list(quote("list"), list(quote("car"), quote("x")), list(quote("car"), quote("y"))), list(quote("pair"), list(quote("cdr"), quote("x")), list(quote("cdr"), quote("y")))))))))

func pair(args ...Exp) Exp {
	checklen(2, args)
	x := args[0]
	y := args[1]
	return apply(
		cond,
		list(
			func() Exp {
				return apply(
					and,
					apply(
						null,
						x,
					),
					apply(
						null,
						y,
					),
				)
			},
			func() Exp {
				return apply(
					quote,
					Nil,
				)
			},
		),
		list(
			func() Exp {
				return apply(
					and,
					apply(
						not,
						apply(
							atom,
							x,
						),
					),
					apply(
						not,
						apply(
							atom,
							y,
						),
					),
				)
			},
			func() Exp {
				return apply(
					cons,
					apply(
						list,
						apply(
							car,
							x,
						),
						apply(
							car,
							y,
						),
					),
					apply(
						pair,
						apply(
							cdr,
							x,
						),
						apply(
							cdr,
							y,
						),
					),
				)
			},
		),
	)
}

var env_subst = list(quote("subst"), list(quote("label"), quote("subst"), list(quote("lambda"), list(quote("x"), quote("y"), quote("z")), list(quote("cond"), list(list(quote("atom"), quote("z")), list(quote("cond"), list(list(quote("eq"), quote("z"), quote("y")), quote("x")), list(list(quote("quote"), quote("t")), quote("z")))), list(list(quote("quote"), quote("t")), list(quote("cons"), list(quote("subst"), quote("x"), quote("y"), list(quote("car"), quote("z"))), list(quote("subst"), quote("x"), quote("y"), list(quote("cdr"), quote("z")))))))))

func subst(args ...Exp) Exp {
	checklen(3, args)
	x := args[0]
	y := args[1]
	z := args[2]
	return apply(
		cond,
		list(
			func() Exp {
				return apply(
					atom,
					z,
				)
			},
			func() Exp {
				return apply(
					cond,
					list(
						func() Exp {
							return apply(
								eq,
								z,
								y,
							)
						},
						func() Exp {
							return x
						},
					),
					list(
						func() Exp {
							return apply(
								quote,
								t,
							)
						},
						func() Exp {
							return z
						},
					),
				)
			},
		),
		list(
			func() Exp {
				return apply(
					quote,
					t,
				)
			},
			func() Exp {
				return apply(
					cons,
					apply(
						subst,
						x,
						y,
						apply(
							car,
							z,
						),
					),
					apply(
						subst,
						x,
						y,
						apply(
							cdr,
							z,
						),
					),
				)
			},
		),
	)
}

func init() {
	env = list(
		env_and,
		env_xappend,
		env_assoc,
		env_caaaar,
		env_caaadr,
		env_caaar,
		env_caadar,
		env_caaddr,
		env_caadr,
		env_caar,
		env_cadaar,
		env_cadadr,
		env_cadar,
		env_caddar,
		env_cadddr,
		env_caddr,
		env_cadr,
		env_cdaaar,
		env_cdaadr,
		env_cdaar,
		env_cdadar,
		env_cdaddr,
		env_cdadr,
		env_cdar,
		env_cddaar,
		env_cddadr,
		env_cddar,
		env_cdddar,
		env_cddddr,
		env_cdddr,
		env_cddr,
		env_eval,
		env_evcon,
		env_evlis,
		env_not,
		env_null,
		env_pair,
		env_subst,
	)
}
