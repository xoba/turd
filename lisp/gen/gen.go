// FILE IS AUTOGENERATED, DO NOT EDIT!

package main

import (
	"bytes"
	"fmt"
	"strings"
)

func main() {

	show := func(e Exp) {
		fmt.Println(String(e))
	}
	show(quote())
	show(quote("howdy"))
	show(atom(quote("howdy")))
	show(apply(atom, apply(quote, "howdy")))
	show(atom(list()))
	show(atom(list("a")))
	show(eq(quote("a"), quote("a")))
	show(eq(quote("b"), quote("a")))

	lazy := func(e Exp) Lazy {
		return Lazy(func() Exp {
			return e
		})
	}

	show(cond(
		list(lazy(True), lazy(quote("a"))),
		list(lazy(True), lazy(quote("b"))),
	))
	show(cond(
		list(lazy(False), lazy(quote("a"))),
		list(lazy(True), lazy(quote("b"))),
	))

	show(cons(quote("a"), list(quote("b"), quote("c"))))
}

func cons(args ...Exp) Exp {
	checklen(2, args)
	x, y := args[0], args[1]
	if IsAtom(y) {
		panic("cons to atom")
	}
	slice := y.([]Exp)
	out := make([]Exp, len(slice)+1)
	out[0] = x
	for i, e := range slice {
		out[i+1] = e
	}
	return out
}

type Exp interface{}

func String(e Exp) string {
	w := new(bytes.Buffer)
	switch t := e.(type) {
	case string:
		fmt.Fprint(w, t)
	case []Exp:
		list := make([]string, len(t))
		for i, e := range t {
			list[i] = String(e)
		}
		fmt.Fprintf(w, "(%s)", strings.Join(list, " "))
	default:
		panic(fmt.Errorf("exp type %T", t))
	}
	return w.String()
}

type Func func(...Exp) Exp

type Lazy func() Exp

var (
	Nil    Exp  = list()
	True   Exp  = quote("t")
	False  Exp  = Nil
	t      Func = nil
	lambda Exp  = "lambda"
	label  Exp  = "label"
)

func IsAtom(e Exp) bool {
	switch e.(type) {
	case string:
		return true
	default:
		return false
	}
}

func apply(f Func, args ...Exp) Exp {
	return f(args...)
}

func quote(args ...Exp) Exp {
	switch len(args) {
	case 0:
		return "quote"
	case 1:
		return args[0]
	default:
		panic("quote")
	}
}

func checklen(n int, args []Exp) {
	if len(args) != n {
		panic(fmt.Errorf("len = %d vs %d", len(args), n))
	}
}

func car(args ...Exp) Exp {
	checklen(1, args)
	return args[0]
}

func cdr(args ...Exp) Exp {
	checklen(1, args)
	return args[1:]
}

func atom(args ...Exp) Exp {
	checklen(1, args)
	if len(args) != 1 {
		panic("args")
	}
	switch t := args[0].(type) {
	case string:
		return True
	case []Exp:
		if len(t) == 0 {
			return True
		}
		return False
	default:
		return False
	}
}

func eq(args ...Exp) Exp {
	checklen(2, args)
	s := func(e Exp) string {
		return fmt.Sprintf("%s", e)
	}
	if s(args[0]) == s(args[1]) {
		return True
	}
	return False
}

func list(args ...Exp) Exp {
	return args
}

func boolean(e Exp) bool {
	return fmt.Sprintf("%v", e) == "t"
}

func cond(args ...Exp) Exp {
	fmt.Printf("cond(%v)\n", args)
	for i, a := range args {
		switch t := a.(type) {
		case []Exp:
			if len(t) != 2 {
				panic(fmt.Errorf("len[%d] = %d", i, len(t)))
			}
			p, e := t[0], t[1]
			pl, ok := p.(Lazy)
			if !ok {
				panic("p not lazy")
			}
			if boolean(pl()) {
				el, ok := e.(Lazy)
				if !ok {
					panic("e not lazy")
				}
				return el()
			}
		default:
			panic(fmt.Errorf("cond %T", t))
		}
	}
	panic("cond")
}
func and(args ...Exp) Exp {
	fmt.Printf("and(%v)\n", args)
	x := args[0]
	y := args[1]
	return apply(
		cond,
		list(
			x,
			apply(
				cond,
				list(
					y,
					apply(
						quote,
						t,
					),
				),
				list(
					apply(
						quote,
						t,
					),
					Nil,
				),
			),
		),
		list(
			apply(
				quote,
				t,
			),
			apply(
				quote,
				Nil,
			),
		),
	)
}

func append(args ...Exp) Exp {
	fmt.Printf("append(%v)\n", args)
	x := args[0]
	y := args[1]
	return apply(
		cond,
		list(
			apply(
				null,
				x,
			),
			y,
		),
		list(
			apply(
				quote,
				t,
			),
			apply(
				cons,
				apply(
					car,
					x,
				),
				apply(
					append,
					apply(
						cdr,
						x,
					),
					y,
				),
			),
		),
	)
}

func assoc(args ...Exp) Exp {
	fmt.Printf("assoc(%v)\n", args)
	x := args[0]
	y := args[1]
	return apply(
		cond,
		list(
			apply(
				eq,
				apply(
					caar,
					y,
				),
				x,
			),
			apply(
				cadar,
				y,
			),
		),
		list(
			apply(
				quote,
				t,
			),
			apply(
				assoc,
				x,
				apply(
					cdr,
					y,
				),
			),
		),
	)
}

func caaaar(args ...Exp) Exp {
	fmt.Printf("caaaar(%v)\n", args)
	x := args[0]
	return apply(
		car,
		apply(
			car,
			apply(
				car,
				apply(
					car,
					x,
				),
			),
		),
	)
}

func caaadr(args ...Exp) Exp {
	fmt.Printf("caaadr(%v)\n", args)
	x := args[0]
	return apply(
		car,
		apply(
			car,
			apply(
				car,
				apply(
					cdr,
					x,
				),
			),
		),
	)
}

func caaar(args ...Exp) Exp {
	fmt.Printf("caaar(%v)\n", args)
	x := args[0]
	return apply(
		car,
		apply(
			car,
			apply(
				car,
				x,
			),
		),
	)
}

func caadar(args ...Exp) Exp {
	fmt.Printf("caadar(%v)\n", args)
	x := args[0]
	return apply(
		car,
		apply(
			car,
			apply(
				cdr,
				apply(
					car,
					x,
				),
			),
		),
	)
}

func caaddr(args ...Exp) Exp {
	fmt.Printf("caaddr(%v)\n", args)
	x := args[0]
	return apply(
		car,
		apply(
			car,
			apply(
				cdr,
				apply(
					cdr,
					x,
				),
			),
		),
	)
}

func caadr(args ...Exp) Exp {
	fmt.Printf("caadr(%v)\n", args)
	x := args[0]
	return apply(
		car,
		apply(
			car,
			apply(
				cdr,
				x,
			),
		),
	)
}

func caar(args ...Exp) Exp {
	fmt.Printf("caar(%v)\n", args)
	x := args[0]
	return apply(
		car,
		apply(
			car,
			x,
		),
	)
}

func cadaar(args ...Exp) Exp {
	fmt.Printf("cadaar(%v)\n", args)
	x := args[0]
	return apply(
		car,
		apply(
			cdr,
			apply(
				car,
				apply(
					car,
					x,
				),
			),
		),
	)
}

func cadadr(args ...Exp) Exp {
	fmt.Printf("cadadr(%v)\n", args)
	x := args[0]
	return apply(
		car,
		apply(
			cdr,
			apply(
				car,
				apply(
					cdr,
					x,
				),
			),
		),
	)
}

func cadar(args ...Exp) Exp {
	fmt.Printf("cadar(%v)\n", args)
	x := args[0]
	return apply(
		car,
		apply(
			cdr,
			apply(
				car,
				x,
			),
		),
	)
}

func caddar(args ...Exp) Exp {
	fmt.Printf("caddar(%v)\n", args)
	x := args[0]
	return apply(
		car,
		apply(
			cdr,
			apply(
				cdr,
				apply(
					car,
					x,
				),
			),
		),
	)
}

func cadddr(args ...Exp) Exp {
	fmt.Printf("cadddr(%v)\n", args)
	x := args[0]
	return apply(
		car,
		apply(
			cdr,
			apply(
				cdr,
				apply(
					cdr,
					x,
				),
			),
		),
	)
}

func caddr(args ...Exp) Exp {
	fmt.Printf("caddr(%v)\n", args)
	x := args[0]
	return apply(
		car,
		apply(
			cdr,
			apply(
				cdr,
				x,
			),
		),
	)
}

func cadr(args ...Exp) Exp {
	fmt.Printf("cadr(%v)\n", args)
	x := args[0]
	return apply(
		car,
		apply(
			cdr,
			x,
		),
	)
}

func cdaaar(args ...Exp) Exp {
	fmt.Printf("cdaaar(%v)\n", args)
	x := args[0]
	return apply(
		cdr,
		apply(
			car,
			apply(
				car,
				apply(
					car,
					x,
				),
			),
		),
	)
}

func cdaadr(args ...Exp) Exp {
	fmt.Printf("cdaadr(%v)\n", args)
	x := args[0]
	return apply(
		cdr,
		apply(
			car,
			apply(
				car,
				apply(
					cdr,
					x,
				),
			),
		),
	)
}

func cdaar(args ...Exp) Exp {
	fmt.Printf("cdaar(%v)\n", args)
	x := args[0]
	return apply(
		cdr,
		apply(
			car,
			apply(
				car,
				x,
			),
		),
	)
}

func cdadar(args ...Exp) Exp {
	fmt.Printf("cdadar(%v)\n", args)
	x := args[0]
	return apply(
		cdr,
		apply(
			car,
			apply(
				cdr,
				apply(
					car,
					x,
				),
			),
		),
	)
}

func cdaddr(args ...Exp) Exp {
	fmt.Printf("cdaddr(%v)\n", args)
	x := args[0]
	return apply(
		cdr,
		apply(
			car,
			apply(
				cdr,
				apply(
					cdr,
					x,
				),
			),
		),
	)
}

func cdadr(args ...Exp) Exp {
	fmt.Printf("cdadr(%v)\n", args)
	x := args[0]
	return apply(
		cdr,
		apply(
			car,
			apply(
				cdr,
				x,
			),
		),
	)
}

func cdar(args ...Exp) Exp {
	fmt.Printf("cdar(%v)\n", args)
	x := args[0]
	return apply(
		cdr,
		apply(
			car,
			x,
		),
	)
}

func cddaar(args ...Exp) Exp {
	fmt.Printf("cddaar(%v)\n", args)
	x := args[0]
	return apply(
		cdr,
		apply(
			cdr,
			apply(
				car,
				apply(
					car,
					x,
				),
			),
		),
	)
}

func cddadr(args ...Exp) Exp {
	fmt.Printf("cddadr(%v)\n", args)
	x := args[0]
	return apply(
		cdr,
		apply(
			cdr,
			apply(
				car,
				apply(
					cdr,
					x,
				),
			),
		),
	)
}

func cddar(args ...Exp) Exp {
	fmt.Printf("cddar(%v)\n", args)
	x := args[0]
	return apply(
		cdr,
		apply(
			cdr,
			apply(
				car,
				x,
			),
		),
	)
}

func cdddar(args ...Exp) Exp {
	fmt.Printf("cdddar(%v)\n", args)
	x := args[0]
	return apply(
		cdr,
		apply(
			cdr,
			apply(
				cdr,
				apply(
					car,
					x,
				),
			),
		),
	)
}

func cddddr(args ...Exp) Exp {
	fmt.Printf("cddddr(%v)\n", args)
	x := args[0]
	return apply(
		cdr,
		apply(
			cdr,
			apply(
				cdr,
				apply(
					cdr,
					x,
				),
			),
		),
	)
}

func cdddr(args ...Exp) Exp {
	fmt.Printf("cdddr(%v)\n", args)
	x := args[0]
	return apply(
		cdr,
		apply(
			cdr,
			apply(
				cdr,
				x,
			),
		),
	)
}

func cddr(args ...Exp) Exp {
	fmt.Printf("cddr(%v)\n", args)
	x := args[0]
	return apply(
		cdr,
		apply(
			cdr,
			x,
		),
	)
}

func eval(args ...Exp) Exp {
	fmt.Printf("eval(%v)\n", args)
	e := args[0]
	a := args[1]
	return apply(
		cond,
		list(
			apply(
				atom,
				e,
			),
			apply(
				assoc,
				e,
				a,
			),
		),
		list(
			apply(
				atom,
				apply(
					car,
					e,
				),
			),
			apply(
				cond,
				list(
					apply(
						eq,
						apply(
							car,
							e,
						),
						apply(
							quote,
							quote,
						),
					),
					apply(
						cadr,
						e,
					),
				),
				list(
					apply(
						eq,
						apply(
							car,
							e,
						),
						apply(
							quote,
							atom,
						),
					),
					apply(
						atom,
						apply(
							eval,
							apply(
								cadr,
								e,
							),
							a,
						),
					),
				),
				list(
					apply(
						eq,
						apply(
							car,
							e,
						),
						apply(
							quote,
							eq,
						),
					),
					apply(
						eq,
						apply(
							eval,
							apply(
								cadr,
								e,
							),
							a,
						),
						apply(
							eval,
							apply(
								caddr,
								e,
							),
							a,
						),
					),
				),
				list(
					apply(
						eq,
						apply(
							car,
							e,
						),
						apply(
							quote,
							car,
						),
					),
					apply(
						car,
						apply(
							eval,
							apply(
								cadr,
								e,
							),
							a,
						),
					),
				),
				list(
					apply(
						eq,
						apply(
							car,
							e,
						),
						apply(
							quote,
							cdr,
						),
					),
					apply(
						cdr,
						apply(
							eval,
							apply(
								cadr,
								e,
							),
							a,
						),
					),
				),
				list(
					apply(
						eq,
						apply(
							car,
							e,
						),
						apply(
							quote,
							cons,
						),
					),
					apply(
						cons,
						apply(
							eval,
							apply(
								cadr,
								e,
							),
							a,
						),
						apply(
							eval,
							apply(
								caddr,
								e,
							),
							a,
						),
					),
				),
				list(
					apply(
						eq,
						apply(
							car,
							e,
						),
						apply(
							quote,
							cond,
						),
					),
					apply(
						evcon,
						apply(
							cdr,
							e,
						),
						a,
					),
				),
				list(
					apply(
						quote,
						t,
					),
					apply(
						eval,
						apply(
							cons,
							apply(
								assoc,
								apply(
									car,
									e,
								),
								a,
							),
							apply(
								cdr,
								e,
							),
						),
						a,
					),
				),
			),
		),
		list(
			apply(
				eq,
				apply(
					caar,
					e,
				),
				apply(
					quote,
					label,
				),
			),
			apply(
				eval,
				apply(
					cons,
					apply(
						caddar,
						e,
					),
					apply(
						cdr,
						e,
					),
				),
				apply(
					cons,
					apply(
						list,
						apply(
							cadar,
							e,
						),
						apply(
							car,
							e,
						),
					),
					a,
				),
			),
		),
		list(
			apply(
				eq,
				apply(
					caar,
					e,
				),
				apply(
					quote,
					lambda,
				),
			),
			apply(
				eval,
				apply(
					caddar,
					e,
				),
				apply(
					append,
					apply(
						pair,
						apply(
							cadar,
							e,
						),
						apply(
							evlis,
							apply(
								cdr,
								e,
							),
							a,
						),
					),
					a,
				),
			),
		),
	)
}

func evcon(args ...Exp) Exp {
	fmt.Printf("evcon(%v)\n", args)
	c := args[0]
	a := args[1]
	return apply(
		cond,
		list(
			apply(
				eval,
				apply(
					caar,
					c,
				),
				a,
			),
			apply(
				eval,
				apply(
					cadar,
					c,
				),
				a,
			),
		),
		list(
			apply(
				quote,
				t,
			),
			apply(
				evcon,
				apply(
					cdr,
					c,
				),
				a,
			),
		),
	)
}

func evlis(args ...Exp) Exp {
	fmt.Printf("evlis(%v)\n", args)
	m := args[0]
	a := args[1]
	return apply(
		cond,
		list(
			apply(
				null,
				m,
			),
			apply(
				quote,
				Nil,
			),
		),
		list(
			apply(
				quote,
				t,
			),
			apply(
				cons,
				apply(
					eval,
					apply(
						car,
						m,
					),
					a,
				),
				apply(
					evlis,
					apply(
						cdr,
						m,
					),
					a,
				),
			),
		),
	)
}

func not(args ...Exp) Exp {
	fmt.Printf("not(%v)\n", args)
	x := args[0]
	return apply(
		cond,
		list(
			x,
			apply(
				quote,
				Nil,
			),
		),
		list(
			apply(
				quote,
				t,
			),
			apply(
				quote,
				t,
			),
		),
	)
}

func null(args ...Exp) Exp {
	fmt.Printf("null(%v)\n", args)
	x := args[0]
	return apply(
		eq,
		x,
		apply(
			quote,
			Nil,
		),
	)
}

func pair(args ...Exp) Exp {
	fmt.Printf("pair(%v)\n", args)
	x := args[0]
	y := args[1]
	return apply(
		cond,
		list(
			apply(
				and,
				apply(
					null,
					x,
				),
				apply(
					null,
					y,
				),
			),
			apply(
				quote,
				Nil,
			),
		),
		list(
			apply(
				and,
				apply(
					not,
					apply(
						atom,
						x,
					),
				),
				apply(
					not,
					apply(
						atom,
						y,
					),
				),
			),
			apply(
				cons,
				apply(
					list,
					apply(
						car,
						x,
					),
					apply(
						car,
						y,
					),
				),
				apply(
					pair,
					apply(
						cdr,
						x,
					),
					apply(
						cdr,
						y,
					),
				),
			),
		),
	)
}

func subst(args ...Exp) Exp {
	fmt.Printf("subst(%v)\n", args)
	x := args[0]
	y := args[1]
	z := args[2]
	return apply(
		cond,
		list(
			apply(
				atom,
				z,
			),
			apply(
				cond,
				list(
					apply(
						eq,
						z,
						y,
					),
					x,
				),
				list(
					apply(
						quote,
						t,
					),
					z,
				),
			),
		),
		list(
			apply(
				quote,
				t,
			),
			apply(
				cons,
				apply(
					subst,
					x,
					y,
					apply(
						car,
						z,
					),
				),
				apply(
					subst,
					x,
					y,
					apply(
						cdr,
						z,
					),
				),
			),
		),
	)
}
