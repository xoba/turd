// THIS FILE IS AUTOGENERATED, DO NOT EDIT!

package main

import (
	"bytes"
	"fmt"
	"strings"

	"github.com/xoba/turd/lisp"
	"github.com/xoba/turd/lisp/exp"
)

type Exp interface{}

type Func func(...Exp) Exp

var env Exp

var (
	Nil   Exp = list()
	t     Exp = "t"
	True  Exp = "t"
	False Exp = Nil
)

func check(e error) {
	if e != nil {
		panic(e)
	}
}

func ToExp(e exp.Expression) Exp {
	if err := e.Error(); err != nil {
		panic(err)
	}
	if a := e.Atom(); a != nil {
		return a.String()
	}
	var list []Exp
	for _, x := range e.List() {
		list = append(list, ToExp(x))
	}
	return list
}

func main() {

	{

		var last string
		test := func(msg, input, expect string) {
			if msg == "" {
				return
			}
			if msg != last {
				fmt.Println()
			}
			last = msg
			in, err := lisp.Read(input)
			check(err)
			fmt.Printf("%-10s %-20s -> %s\n", msg+":", in, expect)
			res := eval(ToExp(in), env)
			if got := String(res); got != expect {
				panic(fmt.Errorf("expected %q, got %q\n", expect, got))
			}
		}

		test("quote", "(quote a)", "a")
		test("quote", "(quote (a b c))", "(a b c)")

		test("atom", "(atom 'a)", "t")
		test("atom", "(atom '(a b c))", "()")
		test("atom", "(atom '())", "t")
		test("atom", "(atom 'a)", "t")
		test("atom", "(atom '(atom 'a))", "()")

		test("eq", "(eq 'a 'a)", "t")
		test("eq", "(eq 'a 'b)", "()")
		test("eq", "(eq '() '())", "t")

		test("car", "(car '(a b c))", "a")
		test("cdr", "(cdr '(a b c))", "(b c)")

		test("cons", "(cons 'a '(b c))", "(a b c)")
		test("cons", "(cons 'a (cons 'b (cons 'c '())))", "(a b c)")
		test("cons", "(car (cons 'a '(b c)))", "a")
		test("cons", "(cdr (cons 'a '(b c)))", "(b c)")

		test("cond", "(cond ((eq 'a 'b) 'first) ((atom 'a) 'second))", "second")
		test("cond", "(cond ((eq 'a 'a) 'first) ((atom 'a) 'second))", "first")

		test("lambda", "((lambda (x) (cons x '(b))) 'a)", "(a b)")

		test("label", `(
 (label subst 
	(lambda (x y z)
	  (cond ((atom z) (
			   cond ((eq z y) x)
				('t z)))
		('t (cons (subst x y (car z))
			  (subst x y (cdr z))))))
	)
 'm 'b '(a b (a b c) d))`, "(a m (a m c) d)")
		test("label", "(subst 'm 'b '(a b (a b c) d))", "(a m (a m c) d)")

		test("cxr", "(cadr '((a b) (c d) e))", "(c d)")
		test("cxr", "(caddr '((a b) (c d) e))", "e")
		test("cxr", "(cdar '((a b) (c d) e))", "(b)")

		test("list", "(cons 'a (cons 'b (cons 'c '())))", "(a b c)")
		test("list", "(list 'a 'b 'c)", "(a b c)")

		test("null", "(null 'a)", "()")
		test("null", "(null '())", "t")

		test("and", "(and (atom 'a) (eq 'a 'a))", "t")
		test("and", "(and (atom 'a) (eq 'a 'b))", "()")

		test("not", "(not (eq 'a 'a))", "()")
		test("not", "(not (eq 'a 'b))", "t")

		test("append", "(append '(a b) '(c d))", "(a b c d)")
		test("append", "(append '() '(c d))", "(c d)")
		test("", "", "")
		test("", "", "")
		test("", "", "")
		test("", "", "")
		test("", "", "")
		test("", "", "")
		test("", "", "")
		test("", "", "")
		test("", "", "")
		test("", "", "")
		test("", "", "")

	}

	return

	test := func(msg string, e Exp, expected string) {
		got := String(e)
		fmt.Printf("%s: %s\n", msg, got)
		if got != expected {
			fmt.Printf("*** expected %q, got %q\n", expected, got)
		}
	}
	test("0", testing(list("abc", "2")), "abc")
	//return

	test("1", quote("howdy"), "howdy")

	test("2", atom(quote("howdy")), "t")
	test("11", atom(list("quote", "a")), "()")
	test("12", atom("x"), "t")

	test("3", apply(atom, apply(quote, "howdy")), "t")
	test("4", atom(list()), "t")
	test("5", atom(list("a")), "()")
	test("6", eq("a", "a"), "t")
	test("7", eq("a", "b"), "()")

	f1 := and("t", "t")

	test("14", f1, "t")
	test("15", and("t", list()), "()")

	lazy := func(e Exp) Func {
		return Func(func(...Exp) Exp {
			return e
		})
	}

	test("8", cond(
		list(lazy(True), lazy(quote("a"))),
		list(lazy(True), lazy(quote("b"))),
	), "a")
	test("9", cond(
		list(lazy(False), lazy(quote("a"))),
		list(lazy(True), lazy(quote("b"))),
	), "b")

	test("10", cons("a", list("b", "c")), "(a b c)")

	e, a := list("quote", "x"), Nil

	test("13", apply(
		atom,
		e,
	), "()")

	fmt.Printf("eval(%s)\n", e)
	test("12", eval(e, a), "x")

	{
		e := list("eq", list("quote", "a"), list("quote", "a"))
		fmt.Printf("testing %s\n", e)
		test("16", eval(e, a), "t")
	}
	{
		e := list("eq", list("quote", "a"), list("quote", "b"))
		fmt.Printf("testing %s\n", e)
		test("16", eval(e, a), "()")
	}
}

func String(e Exp) string {
	w := new(bytes.Buffer)
	switch t := e.(type) {
	case string:
		fmt.Fprint(w, t)
	case []Exp:
		var list []string
		for _, e := range t {
			list = append(list, String(e))
		}
		fmt.Fprintf(w, "(%s)", strings.Join(list, " "))
	case Func:
		return String(t())
	default:
		panic(fmt.Errorf("can't stringify type %T %v", t, t))
	}
	return w.String()
}

func apply(f Func, args ...Exp) Exp {
	return f(args...)
}

func checklen(n int, args []Exp) {
	if len(args) != n {
		panic(fmt.Errorf("expected %d args, got %d", n, len(args)))
	}
}

func list(args ...Exp) Exp {
	return args
}

func boolean(e Exp) bool {
	return fmt.Sprintf("%v", e) == "t"
}

// ----------------------------------------------------------------------
// AXIOMS
// ----------------------------------------------------------------------

//
// #1
//
func quote(args ...Exp) Exp {
	checklen(1, args)
	return args[0]
}

//
// #2
//

func atom(args ...Exp) Exp {
	checklen(1, args)
	x := args[0]
	switch t := x.(type) {
	case string:
		return True
	case []Exp:
		if len(t) == 0 {
			return True
		}
		return False
	default:
		panic(fmt.Errorf("illegal atom call: %T %v", x, x))
	}
}

//
// #3
//

func eq(args ...Exp) Exp {
	checklen(2, args)
	s := func(e Exp) string {
		return fmt.Sprintf("%T %s", e, e)
	}
	x, y := args[0], args[1]
	sx, sy := s(x), s(y)
	if sx == sy {
		return True
	}
	return False
}

//
// #4
//

func car(args ...Exp) Exp {
	checklen(1, args)
	x := args[0]
	switch t := x.(type) {
	case []Exp:
		switch len(t) {
		case 0:
			return Nil
		default:
			return t[0]
		}
	default:
		panic("car needs list")
	}
}

//
// #5
//

func cdr(args ...Exp) Exp {
	checklen(1, args)
	x := args[0]
	switch t := x.(type) {
	case []Exp:
		switch len(t) {
		case 0:
			return Nil
		default:
			return t[1:]
		}
	default:
		panic("cdr needs list")
	}
}

//
// #6
//

func cons(args ...Exp) Exp {
	checklen(2, args)
	x, y := args[0], args[1]
	IsAtom := func(e Exp) bool {
		switch e.(type) {
		case string:
			return true
		case []Exp:
			return false
		default:
			panic("illegal type in cons")
		}
	}
	if IsAtom(y) {
		panic(fmt.Errorf("cons atom %T %v", t, t))
	}
	var out []Exp
	out = append(out, x)
	out = append(out, y.([]Exp)...)
	return out
}

//
// #7
//

func cond(args ...Exp) Exp {
	for _, a := range args {
		switch t := a.(type) {
		case []Exp:
			checklen(2, t)
			p, e := t[0], t[1]
			pl, ok := p.(Func)
			if !ok {
				panic("p not lazy")
			}
			v := pl()
			if boolean(v) {
				el, ok := e.(Func)
				if !ok {
					panic("e not lazy")
				}
				return el()
			}
		default:
			panic(fmt.Errorf("cond %T", t))
		}
	}
	panic(fmt.Errorf("cond fallthrough with %d args", len(args)))
}

//
// #8
//

func display(args ...Exp) Exp {
	checklen(1, args)
	a := args[0]
	fmt.Printf("(display %s)\n", a)
	return a
}

var env_and = list(quote("and"), list(quote("label"), quote("and"), list(quote("lambda"), list(quote("x"), quote("y")), list(quote("cond"), list(quote("x"), list(quote("cond"), list(quote("y"), list(quote("quote"), quote("t"))), list(list(quote("quote"), quote("t")), list()))), list(list(quote("quote"), quote("t")), list(quote("quote"), list()))))))

func and(args ...Exp) Exp {
	checklen(2, args)
	x := args[0]
	y := args[1]
	return apply(
		cond,
		list(
			Func(func(...Exp) Exp {
				return x
			}),
			Func(func(...Exp) Exp {
				return apply(cond, list(
					Func(func(...Exp) Exp {
						return y
					}),
					Func(func(...Exp) Exp {
						return "t"
					}),
				), list(
					Func(func(...Exp) Exp {
						return "t"
					}),
					Func(func(...Exp) Exp {
						return Nil
					}),
				))
			}),
		),
		list(
			Func(func(...Exp) Exp {
				return "t"
			}),
			Func(func(...Exp) Exp {
				return Nil
			}),
		),
	)
}

var env_xappend = list(quote("xappend"), list(quote("label"), quote("xappend"), list(quote("lambda"), list(quote("x"), quote("y")), list(quote("cond"), list(list(quote("null"), quote("x")), quote("y")), list(list(quote("quote"), quote("t")), list(quote("cons"), list(quote("car"), quote("x")), list(quote("xappend"), list(quote("cdr"), quote("x")), quote("y"))))))))

func xappend(args ...Exp) Exp {
	checklen(2, args)
	x := args[0]
	y := args[1]
	return apply(
		cond,
		list(
			Func(func(...Exp) Exp {
				return apply(null, x)
			}),
			Func(func(...Exp) Exp {
				return y
			}),
		),
		list(
			Func(func(...Exp) Exp {
				return "t"
			}),
			Func(func(...Exp) Exp {
				return apply(cons, apply(car, x), apply(xappend, apply(cdr, x), y))
			}),
		),
	)
}

var env_assoc = list(quote("assoc"), list(quote("label"), quote("assoc"), list(quote("lambda"), list(quote("x"), quote("y")), list(quote("cond"), list(list(quote("eq"), list(quote("caar"), quote("y")), quote("x")), list(quote("cadar"), quote("y"))), list(list(quote("quote"), quote("t")), list(quote("assoc"), quote("x"), list(quote("cdr"), quote("y"))))))))

func assoc(args ...Exp) Exp {
	checklen(2, args)
	x := args[0]
	y := args[1]
	return apply(
		cond,
		list(
			Func(func(...Exp) Exp {
				return apply(eq, apply(caar, y), x)
			}),
			Func(func(...Exp) Exp {
				return apply(cadar, y)
			}),
		),
		list(
			Func(func(...Exp) Exp {
				return "t"
			}),
			Func(func(...Exp) Exp {
				return apply(assoc, x, apply(cdr, y))
			}),
		),
	)
}

var env_caaaar = list(quote("caaaar"), list(quote("label"), quote("caaaar"), list(quote("lambda"), list(quote("x")), list(quote("car"), list(quote("car"), list(quote("car"), list(quote("car"), quote("x"))))))))

func caaaar(args ...Exp) Exp {
	checklen(1, args)
	x := args[0]
	return apply(
		car,
		apply(
			car,
			apply(
				car,
				apply(
					car,
					x,
				),
			),
		),
	)
}

var env_caaadr = list(quote("caaadr"), list(quote("label"), quote("caaadr"), list(quote("lambda"), list(quote("x")), list(quote("car"), list(quote("car"), list(quote("car"), list(quote("cdr"), quote("x"))))))))

func caaadr(args ...Exp) Exp {
	checklen(1, args)
	x := args[0]
	return apply(
		car,
		apply(
			car,
			apply(
				car,
				apply(
					cdr,
					x,
				),
			),
		),
	)
}

var env_caaar = list(quote("caaar"), list(quote("label"), quote("caaar"), list(quote("lambda"), list(quote("x")), list(quote("car"), list(quote("car"), list(quote("car"), quote("x")))))))

func caaar(args ...Exp) Exp {
	checklen(1, args)
	x := args[0]
	return apply(
		car,
		apply(
			car,
			apply(
				car,
				x,
			),
		),
	)
}

var env_caadar = list(quote("caadar"), list(quote("label"), quote("caadar"), list(quote("lambda"), list(quote("x")), list(quote("car"), list(quote("car"), list(quote("cdr"), list(quote("car"), quote("x"))))))))

func caadar(args ...Exp) Exp {
	checklen(1, args)
	x := args[0]
	return apply(
		car,
		apply(
			car,
			apply(
				cdr,
				apply(
					car,
					x,
				),
			),
		),
	)
}

var env_caaddr = list(quote("caaddr"), list(quote("label"), quote("caaddr"), list(quote("lambda"), list(quote("x")), list(quote("car"), list(quote("car"), list(quote("cdr"), list(quote("cdr"), quote("x"))))))))

func caaddr(args ...Exp) Exp {
	checklen(1, args)
	x := args[0]
	return apply(
		car,
		apply(
			car,
			apply(
				cdr,
				apply(
					cdr,
					x,
				),
			),
		),
	)
}

var env_caadr = list(quote("caadr"), list(quote("label"), quote("caadr"), list(quote("lambda"), list(quote("x")), list(quote("car"), list(quote("car"), list(quote("cdr"), quote("x")))))))

func caadr(args ...Exp) Exp {
	checklen(1, args)
	x := args[0]
	return apply(
		car,
		apply(
			car,
			apply(
				cdr,
				x,
			),
		),
	)
}

var env_caar = list(quote("caar"), list(quote("label"), quote("caar"), list(quote("lambda"), list(quote("x")), list(quote("car"), list(quote("car"), quote("x"))))))

func caar(args ...Exp) Exp {
	checklen(1, args)
	x := args[0]
	return apply(
		car,
		apply(
			car,
			x,
		),
	)
}

var env_cadaar = list(quote("cadaar"), list(quote("label"), quote("cadaar"), list(quote("lambda"), list(quote("x")), list(quote("car"), list(quote("cdr"), list(quote("car"), list(quote("car"), quote("x"))))))))

func cadaar(args ...Exp) Exp {
	checklen(1, args)
	x := args[0]
	return apply(
		car,
		apply(
			cdr,
			apply(
				car,
				apply(
					car,
					x,
				),
			),
		),
	)
}

var env_cadadr = list(quote("cadadr"), list(quote("label"), quote("cadadr"), list(quote("lambda"), list(quote("x")), list(quote("car"), list(quote("cdr"), list(quote("car"), list(quote("cdr"), quote("x"))))))))

func cadadr(args ...Exp) Exp {
	checklen(1, args)
	x := args[0]
	return apply(
		car,
		apply(
			cdr,
			apply(
				car,
				apply(
					cdr,
					x,
				),
			),
		),
	)
}

var env_cadar = list(quote("cadar"), list(quote("label"), quote("cadar"), list(quote("lambda"), list(quote("x")), list(quote("car"), list(quote("cdr"), list(quote("car"), quote("x")))))))

func cadar(args ...Exp) Exp {
	checklen(1, args)
	x := args[0]
	return apply(
		car,
		apply(
			cdr,
			apply(
				car,
				x,
			),
		),
	)
}

var env_caddar = list(quote("caddar"), list(quote("label"), quote("caddar"), list(quote("lambda"), list(quote("x")), list(quote("car"), list(quote("cdr"), list(quote("cdr"), list(quote("car"), quote("x"))))))))

func caddar(args ...Exp) Exp {
	checklen(1, args)
	x := args[0]
	return apply(
		car,
		apply(
			cdr,
			apply(
				cdr,
				apply(
					car,
					x,
				),
			),
		),
	)
}

var env_cadddr = list(quote("cadddr"), list(quote("label"), quote("cadddr"), list(quote("lambda"), list(quote("x")), list(quote("car"), list(quote("cdr"), list(quote("cdr"), list(quote("cdr"), quote("x"))))))))

func cadddr(args ...Exp) Exp {
	checklen(1, args)
	x := args[0]
	return apply(
		car,
		apply(
			cdr,
			apply(
				cdr,
				apply(
					cdr,
					x,
				),
			),
		),
	)
}

var env_caddr = list(quote("caddr"), list(quote("label"), quote("caddr"), list(quote("lambda"), list(quote("x")), list(quote("car"), list(quote("cdr"), list(quote("cdr"), quote("x")))))))

func caddr(args ...Exp) Exp {
	checklen(1, args)
	x := args[0]
	return apply(
		car,
		apply(
			cdr,
			apply(
				cdr,
				x,
			),
		),
	)
}

var env_cadr = list(quote("cadr"), list(quote("label"), quote("cadr"), list(quote("lambda"), list(quote("x")), list(quote("car"), list(quote("cdr"), quote("x"))))))

func cadr(args ...Exp) Exp {
	checklen(1, args)
	x := args[0]
	return apply(
		car,
		apply(
			cdr,
			x,
		),
	)
}

var env_cdaaar = list(quote("cdaaar"), list(quote("label"), quote("cdaaar"), list(quote("lambda"), list(quote("x")), list(quote("cdr"), list(quote("car"), list(quote("car"), list(quote("car"), quote("x"))))))))

func cdaaar(args ...Exp) Exp {
	checklen(1, args)
	x := args[0]
	return apply(
		cdr,
		apply(
			car,
			apply(
				car,
				apply(
					car,
					x,
				),
			),
		),
	)
}

var env_cdaadr = list(quote("cdaadr"), list(quote("label"), quote("cdaadr"), list(quote("lambda"), list(quote("x")), list(quote("cdr"), list(quote("car"), list(quote("car"), list(quote("cdr"), quote("x"))))))))

func cdaadr(args ...Exp) Exp {
	checklen(1, args)
	x := args[0]
	return apply(
		cdr,
		apply(
			car,
			apply(
				car,
				apply(
					cdr,
					x,
				),
			),
		),
	)
}

var env_cdaar = list(quote("cdaar"), list(quote("label"), quote("cdaar"), list(quote("lambda"), list(quote("x")), list(quote("cdr"), list(quote("car"), list(quote("car"), quote("x")))))))

func cdaar(args ...Exp) Exp {
	checklen(1, args)
	x := args[0]
	return apply(
		cdr,
		apply(
			car,
			apply(
				car,
				x,
			),
		),
	)
}

var env_cdadar = list(quote("cdadar"), list(quote("label"), quote("cdadar"), list(quote("lambda"), list(quote("x")), list(quote("cdr"), list(quote("car"), list(quote("cdr"), list(quote("car"), quote("x"))))))))

func cdadar(args ...Exp) Exp {
	checklen(1, args)
	x := args[0]
	return apply(
		cdr,
		apply(
			car,
			apply(
				cdr,
				apply(
					car,
					x,
				),
			),
		),
	)
}

var env_cdaddr = list(quote("cdaddr"), list(quote("label"), quote("cdaddr"), list(quote("lambda"), list(quote("x")), list(quote("cdr"), list(quote("car"), list(quote("cdr"), list(quote("cdr"), quote("x"))))))))

func cdaddr(args ...Exp) Exp {
	checklen(1, args)
	x := args[0]
	return apply(
		cdr,
		apply(
			car,
			apply(
				cdr,
				apply(
					cdr,
					x,
				),
			),
		),
	)
}

var env_cdadr = list(quote("cdadr"), list(quote("label"), quote("cdadr"), list(quote("lambda"), list(quote("x")), list(quote("cdr"), list(quote("car"), list(quote("cdr"), quote("x")))))))

func cdadr(args ...Exp) Exp {
	checklen(1, args)
	x := args[0]
	return apply(
		cdr,
		apply(
			car,
			apply(
				cdr,
				x,
			),
		),
	)
}

var env_cdar = list(quote("cdar"), list(quote("label"), quote("cdar"), list(quote("lambda"), list(quote("x")), list(quote("cdr"), list(quote("car"), quote("x"))))))

func cdar(args ...Exp) Exp {
	checklen(1, args)
	x := args[0]
	return apply(
		cdr,
		apply(
			car,
			x,
		),
	)
}

var env_cddaar = list(quote("cddaar"), list(quote("label"), quote("cddaar"), list(quote("lambda"), list(quote("x")), list(quote("cdr"), list(quote("cdr"), list(quote("car"), list(quote("car"), quote("x"))))))))

func cddaar(args ...Exp) Exp {
	checklen(1, args)
	x := args[0]
	return apply(
		cdr,
		apply(
			cdr,
			apply(
				car,
				apply(
					car,
					x,
				),
			),
		),
	)
}

var env_cddadr = list(quote("cddadr"), list(quote("label"), quote("cddadr"), list(quote("lambda"), list(quote("x")), list(quote("cdr"), list(quote("cdr"), list(quote("car"), list(quote("cdr"), quote("x"))))))))

func cddadr(args ...Exp) Exp {
	checklen(1, args)
	x := args[0]
	return apply(
		cdr,
		apply(
			cdr,
			apply(
				car,
				apply(
					cdr,
					x,
				),
			),
		),
	)
}

var env_cddar = list(quote("cddar"), list(quote("label"), quote("cddar"), list(quote("lambda"), list(quote("x")), list(quote("cdr"), list(quote("cdr"), list(quote("car"), quote("x")))))))

func cddar(args ...Exp) Exp {
	checklen(1, args)
	x := args[0]
	return apply(
		cdr,
		apply(
			cdr,
			apply(
				car,
				x,
			),
		),
	)
}

var env_cdddar = list(quote("cdddar"), list(quote("label"), quote("cdddar"), list(quote("lambda"), list(quote("x")), list(quote("cdr"), list(quote("cdr"), list(quote("cdr"), list(quote("car"), quote("x"))))))))

func cdddar(args ...Exp) Exp {
	checklen(1, args)
	x := args[0]
	return apply(
		cdr,
		apply(
			cdr,
			apply(
				cdr,
				apply(
					car,
					x,
				),
			),
		),
	)
}

var env_cddddr = list(quote("cddddr"), list(quote("label"), quote("cddddr"), list(quote("lambda"), list(quote("x")), list(quote("cdr"), list(quote("cdr"), list(quote("cdr"), list(quote("cdr"), quote("x"))))))))

func cddddr(args ...Exp) Exp {
	checklen(1, args)
	x := args[0]
	return apply(
		cdr,
		apply(
			cdr,
			apply(
				cdr,
				apply(
					cdr,
					x,
				),
			),
		),
	)
}

var env_cdddr = list(quote("cdddr"), list(quote("label"), quote("cdddr"), list(quote("lambda"), list(quote("x")), list(quote("cdr"), list(quote("cdr"), list(quote("cdr"), quote("x")))))))

func cdddr(args ...Exp) Exp {
	checklen(1, args)
	x := args[0]
	return apply(
		cdr,
		apply(
			cdr,
			apply(
				cdr,
				x,
			),
		),
	)
}

var env_cddr = list(quote("cddr"), list(quote("label"), quote("cddr"), list(quote("lambda"), list(quote("x")), list(quote("cdr"), list(quote("cdr"), quote("x"))))))

func cddr(args ...Exp) Exp {
	checklen(1, args)
	x := args[0]
	return apply(
		cdr,
		apply(
			cdr,
			x,
		),
	)
}

var env_eval = list(quote("eval"), list(quote("label"), quote("eval"), list(quote("lambda"), list(quote("e"), quote("a")), list(quote("cond"), list(list(quote("atom"), quote("e")), list(quote("assoc"), quote("e"), quote("a"))), list(list(quote("atom"), list(quote("car"), quote("e"))), list(quote("cond"), list(list(quote("eq"), list(quote("car"), quote("e")), list(quote("quote"), quote("quote"))), list(quote("cadr"), quote("e"))), list(list(quote("eq"), list(quote("car"), quote("e")), list(quote("quote"), quote("atom"))), list(quote("atom"), list(quote("eval"), list(quote("cadr"), quote("e")), quote("a")))), list(list(quote("eq"), list(quote("car"), quote("e")), list(quote("quote"), quote("eq"))), list(quote("eq"), list(quote("eval"), list(quote("cadr"), quote("e")), quote("a")), list(quote("eval"), list(quote("caddr"), quote("e")), quote("a")))), list(list(quote("eq"), list(quote("car"), quote("e")), list(quote("quote"), quote("display"))), list(quote("display"), list(quote("eval"), list(quote("cadr"), quote("e")), quote("a")))), list(list(quote("eq"), list(quote("car"), quote("e")), list(quote("quote"), quote("car"))), list(quote("car"), list(quote("eval"), list(quote("cadr"), quote("e")), quote("a")))), list(list(quote("eq"), list(quote("car"), quote("e")), list(quote("quote"), quote("cdr"))), list(quote("cdr"), list(quote("eval"), list(quote("cadr"), quote("e")), quote("a")))), list(list(quote("eq"), list(quote("car"), quote("e")), list(quote("quote"), quote("cons"))), list(quote("cons"), list(quote("eval"), list(quote("cadr"), quote("e")), quote("a")), list(quote("eval"), list(quote("caddr"), quote("e")), quote("a")))), list(list(quote("eq"), list(quote("car"), quote("e")), list(quote("quote"), quote("cond"))), list(quote("evcon"), list(quote("cdr"), quote("e")), quote("a"))), list(list(quote("eq"), list(quote("car"), quote("e")), list(quote("quote"), quote("list"))), list(quote("evlis"), list(quote("cdr"), quote("e")), quote("a"))), list(list(quote("quote"), quote("t")), list(quote("eval"), list(quote("cons"), list(quote("assoc"), list(quote("car"), quote("e")), quote("a")), list(quote("cdr"), quote("e"))), quote("a"))))), list(list(quote("eq"), list(quote("caar"), quote("e")), list(quote("quote"), quote("label"))), list(quote("eval"), list(quote("cons"), list(quote("caddar"), quote("e")), list(quote("cdr"), quote("e"))), list(quote("cons"), list(quote("list"), list(quote("cadar"), quote("e")), list(quote("car"), quote("e"))), quote("a")))), list(list(quote("eq"), list(quote("caar"), quote("e")), list(quote("quote"), quote("lambda"))), list(quote("eval"), list(quote("caddar"), quote("e")), list(quote("xappend"), list(quote("pair"), list(quote("cadar"), quote("e")), list(quote("evlis"), list(quote("cdr"), quote("e")), quote("a"))), quote("a"))))))))

func eval(args ...Exp) Exp {
	checklen(2, args)
	e := args[0]
	a := args[1]
	return apply(
		cond,
		list(
			Func(func(...Exp) Exp {
				return apply(atom, e)
			}),
			Func(func(...Exp) Exp {
				return apply(assoc, e, a)
			}),
		),
		list(
			Func(func(...Exp) Exp {
				return apply(atom, apply(car, e))
			}),
			Func(func(...Exp) Exp {
				return apply(cond, list(
					Func(func(...Exp) Exp {
						return apply(eq, apply(car, e), "quote")
					}),
					Func(func(...Exp) Exp {
						return apply(cadr, e)
					}),
				), list(
					Func(func(...Exp) Exp {
						return apply(eq, apply(car, e), "atom")
					}),
					Func(func(...Exp) Exp {
						return apply(atom, apply(eval, apply(cadr, e), a))
					}),
				), list(
					Func(func(...Exp) Exp {
						return apply(eq, apply(car, e), "eq")
					}),
					Func(func(...Exp) Exp {
						return apply(eq, apply(eval, apply(cadr, e), a), apply(eval, apply(caddr, e), a))
					}),
				), list(
					Func(func(...Exp) Exp {
						return apply(eq, apply(car, e), "display")
					}),
					Func(func(...Exp) Exp {
						return apply(display, apply(eval, apply(cadr, e), a))
					}),
				), list(
					Func(func(...Exp) Exp {
						return apply(eq, apply(car, e), "car")
					}),
					Func(func(...Exp) Exp {
						return apply(car, apply(eval, apply(cadr, e), a))
					}),
				), list(
					Func(func(...Exp) Exp {
						return apply(eq, apply(car, e), "cdr")
					}),
					Func(func(...Exp) Exp {
						return apply(cdr, apply(eval, apply(cadr, e), a))
					}),
				), list(
					Func(func(...Exp) Exp {
						return apply(eq, apply(car, e), "cons")
					}),
					Func(func(...Exp) Exp {
						return apply(cons, apply(eval, apply(cadr, e), a), apply(eval, apply(caddr, e), a))
					}),
				), list(
					Func(func(...Exp) Exp {
						return apply(eq, apply(car, e), "cond")
					}),
					Func(func(...Exp) Exp {
						return apply(evcon, apply(cdr, e), a)
					}),
				), list(
					Func(func(...Exp) Exp {
						return apply(eq, apply(car, e), "list")
					}),
					Func(func(...Exp) Exp {
						return apply(evlis, apply(cdr, e), a)
					}),
				), list(
					Func(func(...Exp) Exp {
						return "t"
					}),
					Func(func(...Exp) Exp {
						return apply(eval, apply(cons, apply(assoc, apply(car, e), a), apply(cdr, e)), a)
					}),
				))
			}),
		),
		list(
			Func(func(...Exp) Exp {
				return apply(eq, apply(caar, e), "label")
			}),
			Func(func(...Exp) Exp {
				return apply(eval, apply(cons, apply(caddar, e), apply(cdr, e)), apply(cons, apply(list, apply(cadar, e), apply(car, e)), a))
			}),
		),
		list(
			Func(func(...Exp) Exp {
				return apply(eq, apply(caar, e), "lambda")
			}),
			Func(func(...Exp) Exp {
				return apply(eval, apply(caddar, e), apply(xappend, apply(pair, apply(cadar, e), apply(evlis, apply(cdr, e), a)), a))
			}),
		),
	)
}

var env_evcon = list(quote("evcon"), list(quote("label"), quote("evcon"), list(quote("lambda"), list(quote("c"), quote("a")), list(quote("cond"), list(list(quote("eval"), list(quote("caar"), quote("c")), quote("a")), list(quote("eval"), list(quote("cadar"), quote("c")), quote("a"))), list(list(quote("quote"), quote("t")), list(quote("evcon"), list(quote("cdr"), quote("c")), quote("a")))))))

func evcon(args ...Exp) Exp {
	checklen(2, args)
	c := args[0]
	a := args[1]
	return apply(
		cond,
		list(
			Func(func(...Exp) Exp {
				return apply(eval, apply(caar, c), a)
			}),
			Func(func(...Exp) Exp {
				return apply(eval, apply(cadar, c), a)
			}),
		),
		list(
			Func(func(...Exp) Exp {
				return "t"
			}),
			Func(func(...Exp) Exp {
				return apply(evcon, apply(cdr, c), a)
			}),
		),
	)
}

var env_evlis = list(quote("evlis"), list(quote("label"), quote("evlis"), list(quote("lambda"), list(quote("m"), quote("a")), list(quote("cond"), list(list(quote("null"), quote("m")), list(quote("quote"), list())), list(list(quote("quote"), quote("t")), list(quote("cons"), list(quote("eval"), list(quote("car"), quote("m")), quote("a")), list(quote("evlis"), list(quote("cdr"), quote("m")), quote("a"))))))))

func evlis(args ...Exp) Exp {
	checklen(2, args)
	m := args[0]
	a := args[1]
	return apply(
		cond,
		list(
			Func(func(...Exp) Exp {
				return apply(null, m)
			}),
			Func(func(...Exp) Exp {
				return Nil
			}),
		),
		list(
			Func(func(...Exp) Exp {
				return "t"
			}),
			Func(func(...Exp) Exp {
				return apply(cons, apply(eval, apply(car, m), a), apply(evlis, apply(cdr, m), a))
			}),
		),
	)
}

var env_not = list(quote("not"), list(quote("label"), quote("not"), list(quote("lambda"), list(quote("x")), list(quote("cond"), list(quote("x"), list(quote("quote"), list())), list(list(quote("quote"), quote("t")), list(quote("quote"), quote("t")))))))

func not(args ...Exp) Exp {
	checklen(1, args)
	x := args[0]
	return apply(
		cond,
		list(
			Func(func(...Exp) Exp {
				return x
			}),
			Func(func(...Exp) Exp {
				return Nil
			}),
		),
		list(
			Func(func(...Exp) Exp {
				return "t"
			}),
			Func(func(...Exp) Exp {
				return "t"
			}),
		),
	)
}

var env_null = list(quote("null"), list(quote("label"), quote("null"), list(quote("lambda"), list(quote("x")), list(quote("eq"), quote("x"), list(quote("quote"), list())))))

func null(args ...Exp) Exp {
	checklen(1, args)
	x := args[0]
	return apply(
		eq,
		x,
		Nil,
	)
}

var env_pair = list(quote("pair"), list(quote("label"), quote("pair"), list(quote("lambda"), list(quote("x"), quote("y")), list(quote("cond"), list(list(quote("and"), list(quote("null"), quote("x")), list(quote("null"), quote("y"))), list(quote("quote"), list())), list(list(quote("and"), list(quote("not"), list(quote("atom"), quote("x"))), list(quote("not"), list(quote("atom"), quote("y")))), list(quote("cons"), list(quote("list"), list(quote("car"), quote("x")), list(quote("car"), quote("y"))), list(quote("pair"), list(quote("cdr"), quote("x")), list(quote("cdr"), quote("y")))))))))

func pair(args ...Exp) Exp {
	checklen(2, args)
	x := args[0]
	y := args[1]
	return apply(
		cond,
		list(
			Func(func(...Exp) Exp {
				return apply(and, apply(null, x), apply(null, y))
			}),
			Func(func(...Exp) Exp {
				return Nil
			}),
		),
		list(
			Func(func(...Exp) Exp {
				return apply(and, apply(not, apply(atom, x)), apply(not, apply(atom, y)))
			}),
			Func(func(...Exp) Exp {
				return apply(cons, apply(list, apply(car, x), apply(car, y)), apply(pair, apply(cdr, x), apply(cdr, y)))
			}),
		),
	)
}

var env_subst = list(quote("subst"), list(quote("label"), quote("subst"), list(quote("lambda"), list(quote("x"), quote("y"), quote("z")), list(quote("cond"), list(list(quote("atom"), quote("z")), list(quote("cond"), list(list(quote("eq"), quote("z"), quote("y")), quote("x")), list(list(quote("quote"), quote("t")), quote("z")))), list(list(quote("quote"), quote("t")), list(quote("cons"), list(quote("subst"), quote("x"), quote("y"), list(quote("car"), quote("z"))), list(quote("subst"), quote("x"), quote("y"), list(quote("cdr"), quote("z")))))))))

func subst(args ...Exp) Exp {
	checklen(3, args)
	x := args[0]
	y := args[1]
	z := args[2]
	return apply(
		cond,
		list(
			Func(func(...Exp) Exp {
				return apply(atom, z)
			}),
			Func(func(...Exp) Exp {
				return apply(cond, list(
					Func(func(...Exp) Exp {
						return apply(eq, z, y)
					}),
					Func(func(...Exp) Exp {
						return x
					}),
				), list(
					Func(func(...Exp) Exp {
						return "t"
					}),
					Func(func(...Exp) Exp {
						return z
					}),
				))
			}),
		),
		list(
			Func(func(...Exp) Exp {
				return "t"
			}),
			Func(func(...Exp) Exp {
				return apply(cons, apply(subst, x, y, apply(car, z)), apply(subst, x, y, apply(cdr, z)))
			}),
		),
	)
}

var env_testing = list(quote("testing"), list(quote("label"), quote("testing"), list(quote("lambda"), list(quote("x")), list(quote("display"), list(quote("car"), quote("x"))))))

func testing(args ...Exp) Exp {
	checklen(1, args)
	x := args[0]
	return apply(
		display,
		apply(
			car,
			x,
		),
	)
}

func init() {
	env = list(env_and, env_xappend, env_assoc, env_caaaar, env_caaadr, env_caaar, env_caadar, env_caaddr, env_caadr, env_caar, env_cadaar, env_cadadr, env_cadar, env_caddar, env_cadddr, env_caddr, env_cadr, env_cdaaar, env_cdaadr, env_cdaar, env_cdadar, env_cdaddr, env_cdadr, env_cdar, env_cddaar, env_cddadr, env_cddar, env_cdddar, env_cddddr, env_cdddr, env_cddr, env_eval, env_evcon, env_evlis, env_not, env_null, env_pair, env_subst, env_testing)
}
