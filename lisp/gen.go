package lisp

// THIS FILE IS AUTOGENERATED, DO NOT EDIT!

var L = list

func parse_env(s string) Exp {
	e, err := Parse(s)
	if err != nil {
		panic(err)
	}
	return e
}

var and_label = parse_env(`(label and (lambda (x y) (cond (x (cond (y 't) ('t ()))) ('t '()))))`)

func and(args ...Exp) Exp {
	if err := checklen(2, args); err != nil {
		return err
	}
	x := args[0]
	y := args[1]
	return apply(
		cond,
		L(
			x,
			Func(func(...Exp) Exp {
				return apply(cond, L(
					y,
					"t",
				), L(
					"t",
					Nil,
				))
			}),
		),
		L(
			"t",
			Nil,
		),
	)
}

// THIS FILE IS AUTOGENERATED, DO NOT EDIT!

var append_go_sanitized_label = parse_env(`(label append_go_sanitized (lambda (x y) (cond ((null x) y) ('t (cons (car x) (append_go_sanitized (cdr x) y))))))`)

func append_go_sanitized(args ...Exp) Exp {
	if err := checklen(2, args); err != nil {
		return err
	}
	x := args[0]
	y := args[1]
	return apply(
		cond,
		L(
			Func(func(...Exp) Exp {
				return apply(null, x)
			}),
			y,
		),
		L(
			"t",
			Func(func(...Exp) Exp {
				return apply(cons, apply(car, x), apply(append_go_sanitized, apply(cdr, x), y))
			}),
		),
	)
}

// THIS FILE IS AUTOGENERATED, DO NOT EDIT!

var assoc_label = parse_env(`(label assoc (lambda (x y) (cond ((eq (caar y) x) (cadar y)) ('t (assoc x (cdr y))))))`)

func assoc(args ...Exp) Exp {
	if err := checklen(2, args); err != nil {
		return err
	}
	x := args[0]
	y := args[1]
	return apply(
		cond,
		L(
			Func(func(...Exp) Exp {
				return apply(eq, apply(caar, y), x)
			}),
			Func(func(...Exp) Exp {
				return apply(cadar, y)
			}),
		),
		L(
			"t",
			Func(func(...Exp) Exp {
				return apply(assoc, x, apply(cdr, y))
			}),
		),
	)
}

// THIS FILE IS AUTOGENERATED, DO NOT EDIT!

var caar_label = parse_env(`(label caar (lambda (x) (car (car x))))`)

func caar(args ...Exp) Exp {
	if err := checklen(1, args); err != nil {
		return err
	}
	x := args[0]
	return apply(
		car,
		apply(
			car,
			x,
		),
	)
}

// THIS FILE IS AUTOGENERATED, DO NOT EDIT!

var cadar_label = parse_env(`(label cadar (lambda (x) (car (cdr (car x)))))`)

func cadar(args ...Exp) Exp {
	if err := checklen(1, args); err != nil {
		return err
	}
	x := args[0]
	return apply(
		car,
		apply(
			cdr,
			apply(
				car,
				x,
			),
		),
	)
}

// THIS FILE IS AUTOGENERATED, DO NOT EDIT!

var caddar_label = parse_env(`(label caddar (lambda (x) (car (cdr (cdr (car x))))))`)

func caddar(args ...Exp) Exp {
	if err := checklen(1, args); err != nil {
		return err
	}
	x := args[0]
	return apply(
		car,
		apply(
			cdr,
			apply(
				cdr,
				apply(
					car,
					x,
				),
			),
		),
	)
}

// THIS FILE IS AUTOGENERATED, DO NOT EDIT!

var caddddr_label = parse_env(`(label caddddr (lambda (x) (car (cdr (cdr (cdr (cdr x)))))))`)

func caddddr(args ...Exp) Exp {
	if err := checklen(1, args); err != nil {
		return err
	}
	x := args[0]
	return apply(
		car,
		apply(
			cdr,
			apply(
				cdr,
				apply(
					cdr,
					apply(
						cdr,
						x,
					),
				),
			),
		),
	)
}

// THIS FILE IS AUTOGENERATED, DO NOT EDIT!

var cadddr_label = parse_env(`(label cadddr (lambda (x) (car (cdr (cdr (cdr x))))))`)

func cadddr(args ...Exp) Exp {
	if err := checklen(1, args); err != nil {
		return err
	}
	x := args[0]
	return apply(
		car,
		apply(
			cdr,
			apply(
				cdr,
				apply(
					cdr,
					x,
				),
			),
		),
	)
}

// THIS FILE IS AUTOGENERATED, DO NOT EDIT!

var caddr_label = parse_env(`(label caddr (lambda (x) (car (cdr (cdr x)))))`)

func caddr(args ...Exp) Exp {
	if err := checklen(1, args); err != nil {
		return err
	}
	x := args[0]
	return apply(
		car,
		apply(
			cdr,
			apply(
				cdr,
				x,
			),
		),
	)
}

// THIS FILE IS AUTOGENERATED, DO NOT EDIT!

var cadr_label = parse_env(`(label cadr (lambda (x) (car (cdr x))))`)

func cadr(args ...Exp) Exp {
	if err := checklen(1, args); err != nil {
		return err
	}
	x := args[0]
	return apply(
		car,
		apply(
			cdr,
			x,
		),
	)
}

// THIS FILE IS AUTOGENERATED, DO NOT EDIT!

var cdar_label = parse_env(`(label cdar (lambda (x) (cdr (car x))))`)

func cdar(args ...Exp) Exp {
	if err := checklen(1, args); err != nil {
		return err
	}
	x := args[0]
	return apply(
		cdr,
		apply(
			car,
			x,
		),
	)
}

// THIS FILE IS AUTOGENERATED, DO NOT EDIT!

var eval_label = parse_env(`(label eval (lambda (e a) (cond ((atom e) (assoc e a)) ((atom (car e)) (cond ((eq (car e) 'quote) (cadr e)) ((eq (car e) 'atom) (atom (eval (cadr e) a))) ((eq (car e) 'eq) (eq (eval (cadr e) a) (eval (caddr e) a))) ((eq (car e) 'car) (car (eval (cadr e) a))) ((eq (car e) 'cdr) (cdr (eval (cadr e) a))) ((eq (car e) 'cons) (cons (eval (cadr e) a) (eval (caddr e) a))) ((eq (car e) 'cond) (evcon (cdr e) a)) ((eq (car e) 'plus) (plus (eval (cadr e) a) (eval (caddr e) a))) ((eq (car e) 'inc) (plus (eval (cadr e) a) '1)) ((eq (car e) 'minus) (minus (eval (cadr e) a) (eval (caddr e) a))) ((eq (car e) 'mult) (mult (eval (cadr e) a) (eval (caddr e) a))) ((eq (car e) 'after) (after (eval (cadr e) a) (eval (caddr e) a))) ((eq (car e) 'concat) (concat (eval (cadr e) a) (eval (caddr e) a))) ((eq (car e) 'hash) (hash (eval (cadr e) a))) ((eq (car e) 'newkey) (newkey)) ((eq (car e) 'pub) (pub (eval (cadr e) a))) ((eq (car e) 'sign) (sign (eval (cadr e) a) (eval (caddr e) a))) ((eq (car e) 'verify) (verify (eval (cadr e) a) (eval (caddr e) a) (eval (cadddr e) a))) ((eq (car e) 'display) (display (eval (cadr e) a))) ((eq (car e) 'runes) (runes (eval (cadr e) a))) ((eq (car e) 'err) (err (eval (cadr e) a))) ((eq (car e) 'list) (evlis (cdr e) a)) ('t (eval (cons (assoc (car e) a) (cdr e)) a)))) ((eq (caar e) 'label) (eval (cons (caddar e) (cdr e)) (cons (list (cadar e) (car e)) a))) ((eq (caar e) 'lambda) (cond ((atom (cadar e)) (eval (caddar e) (cons (list (cadar e) (evlis (cdr e) a)) a))) ('t (eval (caddar e) (append_go_sanitized (pair (cadar e) (evlis (cdr e) a)) a))))))))`)

func eval(args ...Exp) Exp {
	if err := checklen(2, args); err != nil {
		return err
	}
	e := args[0]
	a := args[1]
	return apply(
		cond,
		L(
			Func(func(...Exp) Exp {
				return apply(atom, e)
			}),
			Func(func(...Exp) Exp {
				return apply(assoc, e, a)
			}),
		),
		L(
			Func(func(...Exp) Exp {
				return apply(atom, apply(car, e))
			}),
			Func(func(...Exp) Exp {
				return apply(cond, L(
					Func(func(...Exp) Exp {
						return apply(eq, apply(car, e), "quote")
					}),
					Func(func(...Exp) Exp {
						return apply(cadr, e)
					}),
				), L(
					Func(func(...Exp) Exp {
						return apply(eq, apply(car, e), "atom")
					}),
					Func(func(...Exp) Exp {
						return apply(atom, apply(eval, apply(cadr, e), a))
					}),
				), L(
					Func(func(...Exp) Exp {
						return apply(eq, apply(car, e), "eq")
					}),
					Func(func(...Exp) Exp {
						return apply(eq, apply(eval, apply(cadr, e), a), apply(eval, apply(caddr, e), a))
					}),
				), L(
					Func(func(...Exp) Exp {
						return apply(eq, apply(car, e), "car")
					}),
					Func(func(...Exp) Exp {
						return apply(car, apply(eval, apply(cadr, e), a))
					}),
				), L(
					Func(func(...Exp) Exp {
						return apply(eq, apply(car, e), "cdr")
					}),
					Func(func(...Exp) Exp {
						return apply(cdr, apply(eval, apply(cadr, e), a))
					}),
				), L(
					Func(func(...Exp) Exp {
						return apply(eq, apply(car, e), "cons")
					}),
					Func(func(...Exp) Exp {
						return apply(cons, apply(eval, apply(cadr, e), a), apply(eval, apply(caddr, e), a))
					}),
				), L(
					Func(func(...Exp) Exp {
						return apply(eq, apply(car, e), "cond")
					}),
					Func(func(...Exp) Exp {
						return apply(evcon, apply(cdr, e), a)
					}),
				), L(
					Func(func(...Exp) Exp {
						return apply(eq, apply(car, e), "plus")
					}),
					Func(func(...Exp) Exp {
						return apply(plus, apply(eval, apply(cadr, e), a), apply(eval, apply(caddr, e), a))
					}),
				), L(
					Func(func(...Exp) Exp {
						return apply(eq, apply(car, e), "inc")
					}),
					Func(func(...Exp) Exp {
						return apply(plus, apply(eval, apply(cadr, e), a), "1")
					}),
				), L(
					Func(func(...Exp) Exp {
						return apply(eq, apply(car, e), "minus")
					}),
					Func(func(...Exp) Exp {
						return apply(minus, apply(eval, apply(cadr, e), a), apply(eval, apply(caddr, e), a))
					}),
				), L(
					Func(func(...Exp) Exp {
						return apply(eq, apply(car, e), "mult")
					}),
					Func(func(...Exp) Exp {
						return apply(mult, apply(eval, apply(cadr, e), a), apply(eval, apply(caddr, e), a))
					}),
				), L(
					Func(func(...Exp) Exp {
						return apply(eq, apply(car, e), "after")
					}),
					Func(func(...Exp) Exp {
						return apply(after, apply(eval, apply(cadr, e), a), apply(eval, apply(caddr, e), a))
					}),
				), L(
					Func(func(...Exp) Exp {
						return apply(eq, apply(car, e), "concat")
					}),
					Func(func(...Exp) Exp {
						return apply(concat, apply(eval, apply(cadr, e), a), apply(eval, apply(caddr, e), a))
					}),
				), L(
					Func(func(...Exp) Exp {
						return apply(eq, apply(car, e), "hash")
					}),
					Func(func(...Exp) Exp {
						return apply(hash, apply(eval, apply(cadr, e), a))
					}),
				), L(
					Func(func(...Exp) Exp {
						return apply(eq, apply(car, e), "newkey")
					}),
					Func(func(...Exp) Exp {
						return apply(newkey)
					}),
				), L(
					Func(func(...Exp) Exp {
						return apply(eq, apply(car, e), "pub")
					}),
					Func(func(...Exp) Exp {
						return apply(pub, apply(eval, apply(cadr, e), a))
					}),
				), L(
					Func(func(...Exp) Exp {
						return apply(eq, apply(car, e), "sign")
					}),
					Func(func(...Exp) Exp {
						return apply(sign, apply(eval, apply(cadr, e), a), apply(eval, apply(caddr, e), a))
					}),
				), L(
					Func(func(...Exp) Exp {
						return apply(eq, apply(car, e), "verify")
					}),
					Func(func(...Exp) Exp {
						return apply(verify, apply(eval, apply(cadr, e), a), apply(eval, apply(caddr, e), a), apply(eval, apply(cadddr, e), a))
					}),
				), L(
					Func(func(...Exp) Exp {
						return apply(eq, apply(car, e), "display")
					}),
					Func(func(...Exp) Exp {
						return apply(display, apply(eval, apply(cadr, e), a))
					}),
				), L(
					Func(func(...Exp) Exp {
						return apply(eq, apply(car, e), "runes")
					}),
					Func(func(...Exp) Exp {
						return apply(runes, apply(eval, apply(cadr, e), a))
					}),
				), L(
					Func(func(...Exp) Exp {
						return apply(eq, apply(car, e), "err")
					}),
					Func(func(...Exp) Exp {
						return apply(err, apply(eval, apply(cadr, e), a))
					}),
				), L(
					Func(func(...Exp) Exp {
						return apply(eq, apply(car, e), "list")
					}),
					Func(func(...Exp) Exp {
						return apply(evlis, apply(cdr, e), a)
					}),
				), L(
					"t",
					Func(func(...Exp) Exp {
						return apply(eval, apply(cons, apply(assoc, apply(car, e), a), apply(cdr, e)), a)
					}),
				))
			}),
		),
		L(
			Func(func(...Exp) Exp {
				return apply(eq, apply(caar, e), "label")
			}),
			Func(func(...Exp) Exp {
				return apply(eval, apply(cons, apply(caddar, e), apply(cdr, e)), apply(cons, apply(list, apply(cadar, e), apply(car, e)), a))
			}),
		),
		L(
			Func(func(...Exp) Exp {
				return apply(eq, apply(caar, e), "lambda")
			}),
			Func(func(...Exp) Exp {
				return apply(cond, L(
					Func(func(...Exp) Exp {
						return apply(atom, apply(cadar, e))
					}),
					Func(func(...Exp) Exp {
						return apply(eval, apply(caddar, e), apply(cons, apply(list, apply(cadar, e), apply(evlis, apply(cdr, e), a)), a))
					}),
				), L(
					"t",
					Func(func(...Exp) Exp {
						return apply(eval, apply(caddar, e), apply(append_go_sanitized, apply(pair, apply(cadar, e), apply(evlis, apply(cdr, e), a)), a))
					}),
				))
			}),
		),
	)
}

// THIS FILE IS AUTOGENERATED, DO NOT EDIT!

var evcon_label = parse_env(`(label evcon (lambda (c a) (cond ((eval (caar c) a) (eval (cadar c) a)) ('t (evcon (cdr c) a)))))`)

func evcon(args ...Exp) Exp {
	if err := checklen(2, args); err != nil {
		return err
	}
	c := args[0]
	a := args[1]
	return apply(
		cond,
		L(
			Func(func(...Exp) Exp {
				return apply(eval, apply(caar, c), a)
			}),
			Func(func(...Exp) Exp {
				return apply(eval, apply(cadar, c), a)
			}),
		),
		L(
			"t",
			Func(func(...Exp) Exp {
				return apply(evcon, apply(cdr, c), a)
			}),
		),
	)
}

// THIS FILE IS AUTOGENERATED, DO NOT EDIT!

var evlis_label = parse_env(`(label evlis (lambda (m a) (cond ((null m) '()) ('t (cons (eval (car m) a) (evlis (cdr m) a))))))`)

func evlis(args ...Exp) Exp {
	if err := checklen(2, args); err != nil {
		return err
	}
	m := args[0]
	a := args[1]
	return apply(
		cond,
		L(
			Func(func(...Exp) Exp {
				return apply(null, m)
			}),
			Nil,
		),
		L(
			"t",
			Func(func(...Exp) Exp {
				return apply(cons, apply(eval, apply(car, m), a), apply(evlis, apply(cdr, m), a))
			}),
		),
	)
}

// THIS FILE IS AUTOGENERATED, DO NOT EDIT!

var factorial_label = parse_env(`(label factorial (lambda (n) (cond ((eq '0 n) '1) ('t (mult n (factorial (minus n '1)))))))`)

func factorial(args ...Exp) Exp {
	if err := checklen(1, args); err != nil {
		return err
	}
	n := args[0]
	return apply(
		cond,
		L(
			Func(func(...Exp) Exp {
				return apply(eq, "0", n)
			}),
			"1",
		),
		L(
			"t",
			Func(func(...Exp) Exp {
				return apply(mult, n, apply(factorial, apply(minus, n, "1")))
			}),
		),
	)
}

// THIS FILE IS AUTOGENERATED, DO NOT EDIT!

var inc_label = parse_env(`(label inc (lambda (x) (plus '1 x)))`)

func inc(args ...Exp) Exp {
	if err := checklen(1, args); err != nil {
		return err
	}
	x := args[0]
	return apply(
		plus,
		"1",
		x,
	)
}

// THIS FILE IS AUTOGENERATED, DO NOT EDIT!

var length_label = parse_env(`(label length (lambda (x) (cond ((atom x) '0) ('t (plus '1 (length (cdr x)))))))`)

func length(args ...Exp) Exp {
	if err := checklen(1, args); err != nil {
		return err
	}
	x := args[0]
	return apply(
		cond,
		L(
			Func(func(...Exp) Exp {
				return apply(atom, x)
			}),
			"0",
		),
		L(
			"t",
			Func(func(...Exp) Exp {
				return apply(plus, "1", apply(length, apply(cdr, x)))
			}),
		),
	)
}

// THIS FILE IS AUTOGENERATED, DO NOT EDIT!

var next_label = parse_env(`(label next (lambda (t) (cond ((eq (car t) (cadr t)) (err (list 'max (car t)))) ('t (list (car t) (inc (cadr t)))))))`)

func next(args ...Exp) Exp {
	if err := checklen(1, args); err != nil {
		return err
	}
	t := args[0]
	return apply(
		cond,
		L(
			Func(func(...Exp) Exp {
				return apply(eq, apply(car, t), apply(cadr, t))
			}),
			Func(func(...Exp) Exp {
				return apply(err, apply(list, "max", apply(car, t)))
			}),
		),
		L(
			"t",
			Func(func(...Exp) Exp {
				return apply(list, apply(car, t), apply(inc, apply(cadr, t)))
			}),
		),
	)
}

// THIS FILE IS AUTOGENERATED, DO NOT EDIT!

var not_label = parse_env(`(label not (lambda (x) (cond (x '()) ('t 't))))`)

func not(args ...Exp) Exp {
	if err := checklen(1, args); err != nil {
		return err
	}
	x := args[0]
	return apply(
		cond,
		L(
			x,
			Nil,
		),
		L(
			"t",
			"t",
		),
	)
}

// THIS FILE IS AUTOGENERATED, DO NOT EDIT!

var null_label = parse_env(`(label null (lambda (x) (eq x '())))`)

func null(args ...Exp) Exp {
	if err := checklen(1, args); err != nil {
		return err
	}
	x := args[0]
	return apply(
		eq,
		x,
		Nil,
	)
}

// THIS FILE IS AUTOGENERATED, DO NOT EDIT!

var pair_label = parse_env(`(label pair (lambda (x y) (cond ((and (null x) (null y)) '()) ((and (not (atom x)) (not (atom y))) (cons (list (car x) (car y)) (pair (cdr x) (cdr y)))))))`)

func pair(args ...Exp) Exp {
	if err := checklen(2, args); err != nil {
		return err
	}
	x := args[0]
	y := args[1]
	return apply(
		cond,
		L(
			Func(func(...Exp) Exp {
				return apply(and, apply(null, x), apply(null, y))
			}),
			Nil,
		),
		L(
			Func(func(...Exp) Exp {
				return apply(and, apply(not, apply(atom, x)), apply(not, apply(atom, y)))
			}),
			Func(func(...Exp) Exp {
				return apply(cons, apply(list, apply(car, x), apply(car, y)), apply(pair, apply(cdr, x), apply(cdr, y)))
			}),
		),
	)
}

// THIS FILE IS AUTOGENERATED, DO NOT EDIT!

var subst_label = parse_env(`(label subst (lambda (x y z) (cond ((atom z) (cond ((eq z y) x) ('t z))) ('t (cons (subst x y (car z)) (subst x y (cdr z)))))))`)

func subst(args ...Exp) Exp {
	if err := checklen(3, args); err != nil {
		return err
	}
	x := args[0]
	y := args[1]
	z := args[2]
	return apply(
		cond,
		L(
			Func(func(...Exp) Exp {
				return apply(atom, z)
			}),
			Func(func(...Exp) Exp {
				return apply(cond, L(
					Func(func(...Exp) Exp {
						return apply(eq, z, y)
					}),
					x,
				), L(
					"t",
					z,
				))
			}),
		),
		L(
			"t",
			Func(func(...Exp) Exp {
				return apply(cons, apply(subst, x, y, apply(car, z)), apply(subst, x, y, apply(cdr, z)))
			}),
		),
	)
}

// THIS FILE IS AUTOGENERATED, DO NOT EDIT!

var tassoc_label = parse_env(`(label tassoc (lambda (t x y) (cond ((eq (caar y) x) (cadar y)) ('t (tassoc (next t) x (cdr y))))))`)

func tassoc(args ...Exp) Exp {
	if err := checklen(3, args); err != nil {
		return err
	}
	t := args[0]
	x := args[1]
	y := args[2]
	return apply(
		cond,
		L(
			Func(func(...Exp) Exp {
				return apply(eq, apply(caar, y), x)
			}),
			Func(func(...Exp) Exp {
				return apply(cadar, y)
			}),
		),
		L(
			"t",
			Func(func(...Exp) Exp {
				return apply(tassoc, apply(next, t), x, apply(cdr, y))
			}),
		),
	)
}

// THIS FILE IS AUTOGENERATED, DO NOT EDIT!

var try_label = parse_env(`(label try (lambda (t e a) (cond ((atom e) (assoc e a)) ((atom (car e)) (cond ((eq (car e) 'quote) (cadr e)) ((eq (car e) 'atom) (atom (try (next t) (cadr e) a))) ((eq (car e) 'eq) (eq (try (next t) (cadr e) a) (try (next t) (caddr e) a))) ((eq (car e) 'car) (car (try (next t) (cadr e) a))) ((eq (car e) 'cdr) (cdr (try (next t) (cadr e) a))) ((eq (car e) 'cons) (cons (try (next t) (cadr e) a) (try (next t) (caddr e) a))) ((eq (car e) 'cond) (evcon (cdr e) a)) ((eq (car e) 'list) (evlis (cdr e) a)) ('t (try (next t) (cons (tassoc (next t) (car e) a) (cdr e)) a)))) ((eq (caar e) 'label) (try (next t) (cons (caddar e) (cdr e)) (cons (list (cadar e) (car e)) a))) ((eq (caar e) 'lambda) (try (next t) (caddar e) (append_go_sanitized (pair (cadar e) (evlis (cdr e) a)) a))))))`)

func try(args ...Exp) Exp {
	if err := checklen(3, args); err != nil {
		return err
	}
	t := args[0]
	e := args[1]
	a := args[2]
	return apply(
		cond,
		L(
			Func(func(...Exp) Exp {
				return apply(atom, e)
			}),
			Func(func(...Exp) Exp {
				return apply(assoc, e, a)
			}),
		),
		L(
			Func(func(...Exp) Exp {
				return apply(atom, apply(car, e))
			}),
			Func(func(...Exp) Exp {
				return apply(cond, L(
					Func(func(...Exp) Exp {
						return apply(eq, apply(car, e), "quote")
					}),
					Func(func(...Exp) Exp {
						return apply(cadr, e)
					}),
				), L(
					Func(func(...Exp) Exp {
						return apply(eq, apply(car, e), "atom")
					}),
					Func(func(...Exp) Exp {
						return apply(atom, apply(try, apply(next, t), apply(cadr, e), a))
					}),
				), L(
					Func(func(...Exp) Exp {
						return apply(eq, apply(car, e), "eq")
					}),
					Func(func(...Exp) Exp {
						return apply(eq, apply(try, apply(next, t), apply(cadr, e), a), apply(try, apply(next, t), apply(caddr, e), a))
					}),
				), L(
					Func(func(...Exp) Exp {
						return apply(eq, apply(car, e), "car")
					}),
					Func(func(...Exp) Exp {
						return apply(car, apply(try, apply(next, t), apply(cadr, e), a))
					}),
				), L(
					Func(func(...Exp) Exp {
						return apply(eq, apply(car, e), "cdr")
					}),
					Func(func(...Exp) Exp {
						return apply(cdr, apply(try, apply(next, t), apply(cadr, e), a))
					}),
				), L(
					Func(func(...Exp) Exp {
						return apply(eq, apply(car, e), "cons")
					}),
					Func(func(...Exp) Exp {
						return apply(cons, apply(try, apply(next, t), apply(cadr, e), a), apply(try, apply(next, t), apply(caddr, e), a))
					}),
				), L(
					Func(func(...Exp) Exp {
						return apply(eq, apply(car, e), "cond")
					}),
					Func(func(...Exp) Exp {
						return apply(evcon, apply(cdr, e), a)
					}),
				), L(
					Func(func(...Exp) Exp {
						return apply(eq, apply(car, e), "list")
					}),
					Func(func(...Exp) Exp {
						return apply(evlis, apply(cdr, e), a)
					}),
				), L(
					"t",
					Func(func(...Exp) Exp {
						return apply(try, apply(next, t), apply(cons, apply(tassoc, apply(next, t), apply(car, e), a), apply(cdr, e)), a)
					}),
				))
			}),
		),
		L(
			Func(func(...Exp) Exp {
				return apply(eq, apply(caar, e), "label")
			}),
			Func(func(...Exp) Exp {
				return apply(try, apply(next, t), apply(cons, apply(caddar, e), apply(cdr, e)), apply(cons, apply(list, apply(cadar, e), apply(car, e)), a))
			}),
		),
		L(
			Func(func(...Exp) Exp {
				return apply(eq, apply(caar, e), "lambda")
			}),
			Func(func(...Exp) Exp {
				return apply(try, apply(next, t), apply(caddar, e), apply(append_go_sanitized, apply(pair, apply(cadar, e), apply(evlis, apply(cdr, e), a)), a))
			}),
		),
	)
}

// THIS FILE IS AUTOGENERATED, DO NOT EDIT!

var xlist_label = parse_env(`(label xlist (lambda x x))`)

func xlist(args ...Exp) Exp {
	if err := checklen(1, args); err != nil {
		return err
	}
	x := args[0]
	return x
}

// THIS FILE IS AUTOGENERATED, DO NOT EDIT!

func init() {
	env = L(
		L("and", and_label),
		L("append_go_sanitized", append_go_sanitized_label),
		L("assoc", assoc_label),
		L("caar", caar_label),
		L("cadar", cadar_label),
		L("caddar", caddar_label),
		L("caddddr", caddddr_label),
		L("cadddr", cadddr_label),
		L("caddr", caddr_label),
		L("cadr", cadr_label),
		L("cdar", cdar_label),
		L("eval", eval_label),
		L("evcon", evcon_label),
		L("evlis", evlis_label),
		L("factorial", factorial_label),
		L("inc", inc_label),
		L("length", length_label),
		L("next", next_label),
		L("not", not_label),
		L("null", null_label),
		L("pair", pair_label),
		L("subst", subst_label),
		L("tassoc", tassoc_label),
		L("try", try_label),
		L("xlist", xlist_label),
	)
}
