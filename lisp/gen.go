// THIS FILE IS AUTOGENERATED, DO NOT EDIT!

package lisp

var and_label = []Exp{quote("label"), quote("and"), []Exp{quote("lambda"), []Exp{quote("x"), quote("y")}, []Exp{quote("cond"), []Exp{quote("x"), []Exp{quote("cond"), []Exp{quote("y"), []Exp{quote("quote"), quote("t")}}, []Exp{[]Exp{quote("quote"), quote("t")}, []Exp{}}}}, []Exp{[]Exp{quote("quote"), quote("t")}, []Exp{quote("quote"), []Exp{}}}}}}

func and(args ...Exp) Exp {
	if err := checklen(2, args); err != nil {
		return err
	}
	x := args[0]
	y := args[1]
	return apply(
		cond,
		[]Exp{
			x,
			Func(func(...Exp) Exp {
				return apply(cond, []Exp{
					y,
					"t",
				}, []Exp{
					"t",
					Nil,
				})
			}),
		},
		[]Exp{
			"t",
			Nil,
		},
	)
}

var append_go_sanitized_label = []Exp{quote("label"), quote("append_go_sanitized"), []Exp{quote("lambda"), []Exp{quote("x"), quote("y")}, []Exp{quote("cond"), []Exp{[]Exp{quote("null"), quote("x")}, quote("y")}, []Exp{[]Exp{quote("quote"), quote("t")}, []Exp{quote("cons"), []Exp{quote("car"), quote("x")}, []Exp{quote("append_go_sanitized"), []Exp{quote("cdr"), quote("x")}, quote("y")}}}}}}

func append_go_sanitized(args ...Exp) Exp {
	if err := checklen(2, args); err != nil {
		return err
	}
	x := args[0]
	y := args[1]
	return apply(
		cond,
		[]Exp{
			Func(func(...Exp) Exp {
				return apply(null, x)
			}),
			y,
		},
		[]Exp{
			"t",
			Func(func(...Exp) Exp {
				return apply(cons, apply(car, x), apply(append_go_sanitized, apply(cdr, x), y))
			}),
		},
	)
}

var assoc_label = []Exp{quote("label"), quote("assoc"), []Exp{quote("lambda"), []Exp{quote("x"), quote("y")}, []Exp{quote("cond"), []Exp{[]Exp{quote("eq"), []Exp{quote("caar"), quote("y")}, quote("x")}, []Exp{quote("cadar"), quote("y")}}, []Exp{[]Exp{quote("quote"), quote("t")}, []Exp{quote("assoc"), quote("x"), []Exp{quote("cdr"), quote("y")}}}}}}

func assoc(args ...Exp) Exp {
	if err := checklen(2, args); err != nil {
		return err
	}
	x := args[0]
	y := args[1]
	return apply(
		cond,
		[]Exp{
			Func(func(...Exp) Exp {
				return apply(eq, apply(caar, y), x)
			}),
			Func(func(...Exp) Exp {
				return apply(cadar, y)
			}),
		},
		[]Exp{
			"t",
			Func(func(...Exp) Exp {
				return apply(assoc, x, apply(cdr, y))
			}),
		},
	)
}

var caaaar_label = []Exp{quote("label"), quote("caaaar"), []Exp{quote("lambda"), []Exp{quote("x")}, []Exp{quote("car"), []Exp{quote("car"), []Exp{quote("car"), []Exp{quote("car"), quote("x")}}}}}}

func caaaar(args ...Exp) Exp {
	if err := checklen(1, args); err != nil {
		return err
	}
	x := args[0]
	return apply(
		car,
		apply(
			car,
			apply(
				car,
				apply(
					car,
					x,
				),
			),
		),
	)
}

var caaadr_label = []Exp{quote("label"), quote("caaadr"), []Exp{quote("lambda"), []Exp{quote("x")}, []Exp{quote("car"), []Exp{quote("car"), []Exp{quote("car"), []Exp{quote("cdr"), quote("x")}}}}}}

func caaadr(args ...Exp) Exp {
	if err := checklen(1, args); err != nil {
		return err
	}
	x := args[0]
	return apply(
		car,
		apply(
			car,
			apply(
				car,
				apply(
					cdr,
					x,
				),
			),
		),
	)
}

var caaar_label = []Exp{quote("label"), quote("caaar"), []Exp{quote("lambda"), []Exp{quote("x")}, []Exp{quote("car"), []Exp{quote("car"), []Exp{quote("car"), quote("x")}}}}}

func caaar(args ...Exp) Exp {
	if err := checklen(1, args); err != nil {
		return err
	}
	x := args[0]
	return apply(
		car,
		apply(
			car,
			apply(
				car,
				x,
			),
		),
	)
}

var caadar_label = []Exp{quote("label"), quote("caadar"), []Exp{quote("lambda"), []Exp{quote("x")}, []Exp{quote("car"), []Exp{quote("car"), []Exp{quote("cdr"), []Exp{quote("car"), quote("x")}}}}}}

func caadar(args ...Exp) Exp {
	if err := checklen(1, args); err != nil {
		return err
	}
	x := args[0]
	return apply(
		car,
		apply(
			car,
			apply(
				cdr,
				apply(
					car,
					x,
				),
			),
		),
	)
}

var caaddr_label = []Exp{quote("label"), quote("caaddr"), []Exp{quote("lambda"), []Exp{quote("x")}, []Exp{quote("car"), []Exp{quote("car"), []Exp{quote("cdr"), []Exp{quote("cdr"), quote("x")}}}}}}

func caaddr(args ...Exp) Exp {
	if err := checklen(1, args); err != nil {
		return err
	}
	x := args[0]
	return apply(
		car,
		apply(
			car,
			apply(
				cdr,
				apply(
					cdr,
					x,
				),
			),
		),
	)
}

var caadr_label = []Exp{quote("label"), quote("caadr"), []Exp{quote("lambda"), []Exp{quote("x")}, []Exp{quote("car"), []Exp{quote("car"), []Exp{quote("cdr"), quote("x")}}}}}

func caadr(args ...Exp) Exp {
	if err := checklen(1, args); err != nil {
		return err
	}
	x := args[0]
	return apply(
		car,
		apply(
			car,
			apply(
				cdr,
				x,
			),
		),
	)
}

var caar_label = []Exp{quote("label"), quote("caar"), []Exp{quote("lambda"), []Exp{quote("x")}, []Exp{quote("car"), []Exp{quote("car"), quote("x")}}}}

func caar(args ...Exp) Exp {
	if err := checklen(1, args); err != nil {
		return err
	}
	x := args[0]
	return apply(
		car,
		apply(
			car,
			x,
		),
	)
}

var cadaar_label = []Exp{quote("label"), quote("cadaar"), []Exp{quote("lambda"), []Exp{quote("x")}, []Exp{quote("car"), []Exp{quote("cdr"), []Exp{quote("car"), []Exp{quote("car"), quote("x")}}}}}}

func cadaar(args ...Exp) Exp {
	if err := checklen(1, args); err != nil {
		return err
	}
	x := args[0]
	return apply(
		car,
		apply(
			cdr,
			apply(
				car,
				apply(
					car,
					x,
				),
			),
		),
	)
}

var cadadr_label = []Exp{quote("label"), quote("cadadr"), []Exp{quote("lambda"), []Exp{quote("x")}, []Exp{quote("car"), []Exp{quote("cdr"), []Exp{quote("car"), []Exp{quote("cdr"), quote("x")}}}}}}

func cadadr(args ...Exp) Exp {
	if err := checklen(1, args); err != nil {
		return err
	}
	x := args[0]
	return apply(
		car,
		apply(
			cdr,
			apply(
				car,
				apply(
					cdr,
					x,
				),
			),
		),
	)
}

var cadar_label = []Exp{quote("label"), quote("cadar"), []Exp{quote("lambda"), []Exp{quote("x")}, []Exp{quote("car"), []Exp{quote("cdr"), []Exp{quote("car"), quote("x")}}}}}

func cadar(args ...Exp) Exp {
	if err := checklen(1, args); err != nil {
		return err
	}
	x := args[0]
	return apply(
		car,
		apply(
			cdr,
			apply(
				car,
				x,
			),
		),
	)
}

var caddar_label = []Exp{quote("label"), quote("caddar"), []Exp{quote("lambda"), []Exp{quote("x")}, []Exp{quote("car"), []Exp{quote("cdr"), []Exp{quote("cdr"), []Exp{quote("car"), quote("x")}}}}}}

func caddar(args ...Exp) Exp {
	if err := checklen(1, args); err != nil {
		return err
	}
	x := args[0]
	return apply(
		car,
		apply(
			cdr,
			apply(
				cdr,
				apply(
					car,
					x,
				),
			),
		),
	)
}

var cadddr_label = []Exp{quote("label"), quote("cadddr"), []Exp{quote("lambda"), []Exp{quote("x")}, []Exp{quote("car"), []Exp{quote("cdr"), []Exp{quote("cdr"), []Exp{quote("cdr"), quote("x")}}}}}}

func cadddr(args ...Exp) Exp {
	if err := checklen(1, args); err != nil {
		return err
	}
	x := args[0]
	return apply(
		car,
		apply(
			cdr,
			apply(
				cdr,
				apply(
					cdr,
					x,
				),
			),
		),
	)
}

var caddr_label = []Exp{quote("label"), quote("caddr"), []Exp{quote("lambda"), []Exp{quote("x")}, []Exp{quote("car"), []Exp{quote("cdr"), []Exp{quote("cdr"), quote("x")}}}}}

func caddr(args ...Exp) Exp {
	if err := checklen(1, args); err != nil {
		return err
	}
	x := args[0]
	return apply(
		car,
		apply(
			cdr,
			apply(
				cdr,
				x,
			),
		),
	)
}

var cadr_label = []Exp{quote("label"), quote("cadr"), []Exp{quote("lambda"), []Exp{quote("x")}, []Exp{quote("car"), []Exp{quote("cdr"), quote("x")}}}}

func cadr(args ...Exp) Exp {
	if err := checklen(1, args); err != nil {
		return err
	}
	x := args[0]
	return apply(
		car,
		apply(
			cdr,
			x,
		),
	)
}

var cdaaar_label = []Exp{quote("label"), quote("cdaaar"), []Exp{quote("lambda"), []Exp{quote("x")}, []Exp{quote("cdr"), []Exp{quote("car"), []Exp{quote("car"), []Exp{quote("car"), quote("x")}}}}}}

func cdaaar(args ...Exp) Exp {
	if err := checklen(1, args); err != nil {
		return err
	}
	x := args[0]
	return apply(
		cdr,
		apply(
			car,
			apply(
				car,
				apply(
					car,
					x,
				),
			),
		),
	)
}

var cdaadr_label = []Exp{quote("label"), quote("cdaadr"), []Exp{quote("lambda"), []Exp{quote("x")}, []Exp{quote("cdr"), []Exp{quote("car"), []Exp{quote("car"), []Exp{quote("cdr"), quote("x")}}}}}}

func cdaadr(args ...Exp) Exp {
	if err := checklen(1, args); err != nil {
		return err
	}
	x := args[0]
	return apply(
		cdr,
		apply(
			car,
			apply(
				car,
				apply(
					cdr,
					x,
				),
			),
		),
	)
}

var cdaar_label = []Exp{quote("label"), quote("cdaar"), []Exp{quote("lambda"), []Exp{quote("x")}, []Exp{quote("cdr"), []Exp{quote("car"), []Exp{quote("car"), quote("x")}}}}}

func cdaar(args ...Exp) Exp {
	if err := checklen(1, args); err != nil {
		return err
	}
	x := args[0]
	return apply(
		cdr,
		apply(
			car,
			apply(
				car,
				x,
			),
		),
	)
}

var cdadar_label = []Exp{quote("label"), quote("cdadar"), []Exp{quote("lambda"), []Exp{quote("x")}, []Exp{quote("cdr"), []Exp{quote("car"), []Exp{quote("cdr"), []Exp{quote("car"), quote("x")}}}}}}

func cdadar(args ...Exp) Exp {
	if err := checklen(1, args); err != nil {
		return err
	}
	x := args[0]
	return apply(
		cdr,
		apply(
			car,
			apply(
				cdr,
				apply(
					car,
					x,
				),
			),
		),
	)
}

var cdaddr_label = []Exp{quote("label"), quote("cdaddr"), []Exp{quote("lambda"), []Exp{quote("x")}, []Exp{quote("cdr"), []Exp{quote("car"), []Exp{quote("cdr"), []Exp{quote("cdr"), quote("x")}}}}}}

func cdaddr(args ...Exp) Exp {
	if err := checklen(1, args); err != nil {
		return err
	}
	x := args[0]
	return apply(
		cdr,
		apply(
			car,
			apply(
				cdr,
				apply(
					cdr,
					x,
				),
			),
		),
	)
}

var cdadr_label = []Exp{quote("label"), quote("cdadr"), []Exp{quote("lambda"), []Exp{quote("x")}, []Exp{quote("cdr"), []Exp{quote("car"), []Exp{quote("cdr"), quote("x")}}}}}

func cdadr(args ...Exp) Exp {
	if err := checklen(1, args); err != nil {
		return err
	}
	x := args[0]
	return apply(
		cdr,
		apply(
			car,
			apply(
				cdr,
				x,
			),
		),
	)
}

var cdar_label = []Exp{quote("label"), quote("cdar"), []Exp{quote("lambda"), []Exp{quote("x")}, []Exp{quote("cdr"), []Exp{quote("car"), quote("x")}}}}

func cdar(args ...Exp) Exp {
	if err := checklen(1, args); err != nil {
		return err
	}
	x := args[0]
	return apply(
		cdr,
		apply(
			car,
			x,
		),
	)
}

var cddaar_label = []Exp{quote("label"), quote("cddaar"), []Exp{quote("lambda"), []Exp{quote("x")}, []Exp{quote("cdr"), []Exp{quote("cdr"), []Exp{quote("car"), []Exp{quote("car"), quote("x")}}}}}}

func cddaar(args ...Exp) Exp {
	if err := checklen(1, args); err != nil {
		return err
	}
	x := args[0]
	return apply(
		cdr,
		apply(
			cdr,
			apply(
				car,
				apply(
					car,
					x,
				),
			),
		),
	)
}

var cddadr_label = []Exp{quote("label"), quote("cddadr"), []Exp{quote("lambda"), []Exp{quote("x")}, []Exp{quote("cdr"), []Exp{quote("cdr"), []Exp{quote("car"), []Exp{quote("cdr"), quote("x")}}}}}}

func cddadr(args ...Exp) Exp {
	if err := checklen(1, args); err != nil {
		return err
	}
	x := args[0]
	return apply(
		cdr,
		apply(
			cdr,
			apply(
				car,
				apply(
					cdr,
					x,
				),
			),
		),
	)
}

var cddar_label = []Exp{quote("label"), quote("cddar"), []Exp{quote("lambda"), []Exp{quote("x")}, []Exp{quote("cdr"), []Exp{quote("cdr"), []Exp{quote("car"), quote("x")}}}}}

func cddar(args ...Exp) Exp {
	if err := checklen(1, args); err != nil {
		return err
	}
	x := args[0]
	return apply(
		cdr,
		apply(
			cdr,
			apply(
				car,
				x,
			),
		),
	)
}

var cdddar_label = []Exp{quote("label"), quote("cdddar"), []Exp{quote("lambda"), []Exp{quote("x")}, []Exp{quote("cdr"), []Exp{quote("cdr"), []Exp{quote("cdr"), []Exp{quote("car"), quote("x")}}}}}}

func cdddar(args ...Exp) Exp {
	if err := checklen(1, args); err != nil {
		return err
	}
	x := args[0]
	return apply(
		cdr,
		apply(
			cdr,
			apply(
				cdr,
				apply(
					car,
					x,
				),
			),
		),
	)
}

var cddddr_label = []Exp{quote("label"), quote("cddddr"), []Exp{quote("lambda"), []Exp{quote("x")}, []Exp{quote("cdr"), []Exp{quote("cdr"), []Exp{quote("cdr"), []Exp{quote("cdr"), quote("x")}}}}}}

func cddddr(args ...Exp) Exp {
	if err := checklen(1, args); err != nil {
		return err
	}
	x := args[0]
	return apply(
		cdr,
		apply(
			cdr,
			apply(
				cdr,
				apply(
					cdr,
					x,
				),
			),
		),
	)
}

var cdddr_label = []Exp{quote("label"), quote("cdddr"), []Exp{quote("lambda"), []Exp{quote("x")}, []Exp{quote("cdr"), []Exp{quote("cdr"), []Exp{quote("cdr"), quote("x")}}}}}

func cdddr(args ...Exp) Exp {
	if err := checklen(1, args); err != nil {
		return err
	}
	x := args[0]
	return apply(
		cdr,
		apply(
			cdr,
			apply(
				cdr,
				x,
			),
		),
	)
}

var cddr_label = []Exp{quote("label"), quote("cddr"), []Exp{quote("lambda"), []Exp{quote("x")}, []Exp{quote("cdr"), []Exp{quote("cdr"), quote("x")}}}}

func cddr(args ...Exp) Exp {
	if err := checklen(1, args); err != nil {
		return err
	}
	x := args[0]
	return apply(
		cdr,
		apply(
			cdr,
			x,
		),
	)
}

var eval_label = []Exp{quote("label"), quote("eval"), []Exp{quote("lambda"), []Exp{quote("e"), quote("a")}, []Exp{quote("cond"), []Exp{[]Exp{quote("atom"), quote("e")}, []Exp{quote("assoc"), quote("e"), quote("a")}}, []Exp{[]Exp{quote("atom"), []Exp{quote("car"), quote("e")}}, []Exp{quote("cond"), []Exp{[]Exp{quote("eq"), []Exp{quote("car"), quote("e")}, []Exp{quote("quote"), quote("quote")}}, []Exp{quote("cadr"), quote("e")}}, []Exp{[]Exp{quote("eq"), []Exp{quote("car"), quote("e")}, []Exp{quote("quote"), quote("atom")}}, []Exp{quote("atom"), []Exp{quote("eval"), []Exp{quote("cadr"), quote("e")}, quote("a")}}}, []Exp{[]Exp{quote("eq"), []Exp{quote("car"), quote("e")}, []Exp{quote("quote"), quote("eq")}}, []Exp{quote("eq"), []Exp{quote("eval"), []Exp{quote("cadr"), quote("e")}, quote("a")}, []Exp{quote("eval"), []Exp{quote("caddr"), quote("e")}, quote("a")}}}, []Exp{[]Exp{quote("eq"), []Exp{quote("car"), quote("e")}, []Exp{quote("quote"), quote("plus")}}, []Exp{quote("plus"), []Exp{quote("eval"), []Exp{quote("cadr"), quote("e")}, quote("a")}, []Exp{quote("eval"), []Exp{quote("caddr"), quote("e")}, quote("a")}}}, []Exp{[]Exp{quote("eq"), []Exp{quote("car"), quote("e")}, []Exp{quote("quote"), quote("minus")}}, []Exp{quote("minus"), []Exp{quote("eval"), []Exp{quote("cadr"), quote("e")}, quote("a")}, []Exp{quote("eval"), []Exp{quote("caddr"), quote("e")}, quote("a")}}}, []Exp{[]Exp{quote("eq"), []Exp{quote("car"), quote("e")}, []Exp{quote("quote"), quote("mult")}}, []Exp{quote("mult"), []Exp{quote("eval"), []Exp{quote("cadr"), quote("e")}, quote("a")}, []Exp{quote("eval"), []Exp{quote("caddr"), quote("e")}, quote("a")}}}, []Exp{[]Exp{quote("eq"), []Exp{quote("car"), quote("e")}, []Exp{quote("quote"), quote("after")}}, []Exp{quote("after"), []Exp{quote("eval"), []Exp{quote("cadr"), quote("e")}, quote("a")}, []Exp{quote("eval"), []Exp{quote("caddr"), quote("e")}, quote("a")}}}, []Exp{[]Exp{quote("eq"), []Exp{quote("car"), quote("e")}, []Exp{quote("quote"), quote("display")}}, []Exp{quote("display"), []Exp{quote("eval"), []Exp{quote("cadr"), quote("e")}, quote("a")}}}, []Exp{[]Exp{quote("eq"), []Exp{quote("car"), quote("e")}, []Exp{quote("quote"), quote("concat")}}, []Exp{quote("concat"), []Exp{quote("eval"), []Exp{quote("cadr"), quote("e")}, quote("a")}, []Exp{quote("eval"), []Exp{quote("caddr"), quote("e")}, quote("a")}}}, []Exp{[]Exp{quote("eq"), []Exp{quote("car"), quote("e")}, []Exp{quote("quote"), quote("hash")}}, []Exp{quote("hash"), []Exp{quote("eval"), []Exp{quote("cadr"), quote("e")}, quote("a")}}}, []Exp{[]Exp{quote("eq"), []Exp{quote("car"), quote("e")}, []Exp{quote("quote"), quote("newkey")}}, []Exp{quote("newkey")}}, []Exp{[]Exp{quote("eq"), []Exp{quote("car"), quote("e")}, []Exp{quote("quote"), quote("pub")}}, []Exp{quote("pub"), []Exp{quote("eval"), []Exp{quote("cadr"), quote("e")}, quote("a")}}}, []Exp{[]Exp{quote("eq"), []Exp{quote("car"), quote("e")}, []Exp{quote("quote"), quote("sign")}}, []Exp{quote("sign"), []Exp{quote("eval"), []Exp{quote("cadr"), quote("e")}, quote("a")}, []Exp{quote("eval"), []Exp{quote("caddr"), quote("e")}, quote("a")}}}, []Exp{[]Exp{quote("eq"), []Exp{quote("car"), quote("e")}, []Exp{quote("quote"), quote("verify")}}, []Exp{quote("verify"), []Exp{quote("eval"), []Exp{quote("cadr"), quote("e")}, quote("a")}, []Exp{quote("eval"), []Exp{quote("caddr"), quote("e")}, quote("a")}, []Exp{quote("eval"), []Exp{quote("cadddr"), quote("e")}, quote("a")}}}, []Exp{[]Exp{quote("eq"), []Exp{quote("car"), quote("e")}, []Exp{quote("quote"), quote("car")}}, []Exp{quote("car"), []Exp{quote("eval"), []Exp{quote("cadr"), quote("e")}, quote("a")}}}, []Exp{[]Exp{quote("eq"), []Exp{quote("car"), quote("e")}, []Exp{quote("quote"), quote("cdr")}}, []Exp{quote("cdr"), []Exp{quote("eval"), []Exp{quote("cadr"), quote("e")}, quote("a")}}}, []Exp{[]Exp{quote("eq"), []Exp{quote("car"), quote("e")}, []Exp{quote("quote"), quote("cons")}}, []Exp{quote("cons"), []Exp{quote("eval"), []Exp{quote("cadr"), quote("e")}, quote("a")}, []Exp{quote("eval"), []Exp{quote("caddr"), quote("e")}, quote("a")}}}, []Exp{[]Exp{quote("eq"), []Exp{quote("car"), quote("e")}, []Exp{quote("quote"), quote("cond")}}, []Exp{quote("evcon"), []Exp{quote("cdr"), quote("e")}, quote("a")}}, []Exp{[]Exp{quote("eq"), []Exp{quote("car"), quote("e")}, []Exp{quote("quote"), quote("list")}}, []Exp{quote("evlis"), []Exp{quote("cdr"), quote("e")}, quote("a")}}, []Exp{[]Exp{quote("quote"), quote("t")}, []Exp{quote("eval"), []Exp{quote("cons"), []Exp{quote("assoc"), []Exp{quote("car"), quote("e")}, quote("a")}, []Exp{quote("cdr"), quote("e")}}, quote("a")}}}}, []Exp{[]Exp{quote("eq"), []Exp{quote("caar"), quote("e")}, []Exp{quote("quote"), quote("label")}}, []Exp{quote("eval"), []Exp{quote("cons"), []Exp{quote("caddar"), quote("e")}, []Exp{quote("cdr"), quote("e")}}, []Exp{quote("cons"), []Exp{quote("list"), []Exp{quote("cadar"), quote("e")}, []Exp{quote("car"), quote("e")}}, quote("a")}}}, []Exp{[]Exp{quote("eq"), []Exp{quote("caar"), quote("e")}, []Exp{quote("quote"), quote("lambda")}}, []Exp{quote("cond"), []Exp{[]Exp{quote("atom"), []Exp{quote("cadar"), quote("e")}}, []Exp{quote("eval"), []Exp{quote("caddar"), quote("e")}, []Exp{quote("cons"), []Exp{quote("list"), []Exp{quote("cadar"), quote("e")}, []Exp{quote("evlis"), []Exp{quote("cdr"), quote("e")}, quote("a")}}, quote("a")}}}, []Exp{[]Exp{quote("quote"), quote("t")}, []Exp{quote("eval"), []Exp{quote("caddar"), quote("e")}, []Exp{quote("append_go_sanitized"), []Exp{quote("pair"), []Exp{quote("cadar"), quote("e")}, []Exp{quote("evlis"), []Exp{quote("cdr"), quote("e")}, quote("a")}}, quote("a")}}}}}}}}

func eval(args ...Exp) Exp {
	if err := checklen(2, args); err != nil {
		return err
	}
	e := args[0]
	a := args[1]
	return apply(
		cond,
		[]Exp{
			Func(func(...Exp) Exp {
				return apply(atom, e)
			}),
			Func(func(...Exp) Exp {
				return apply(assoc, e, a)
			}),
		},
		[]Exp{
			Func(func(...Exp) Exp {
				return apply(atom, apply(car, e))
			}),
			Func(func(...Exp) Exp {
				return apply(cond, []Exp{
					Func(func(...Exp) Exp {
						return apply(eq, apply(car, e), "quote")
					}),
					Func(func(...Exp) Exp {
						return apply(cadr, e)
					}),
				}, []Exp{
					Func(func(...Exp) Exp {
						return apply(eq, apply(car, e), "atom")
					}),
					Func(func(...Exp) Exp {
						return apply(atom, apply(eval, apply(cadr, e), a))
					}),
				}, []Exp{
					Func(func(...Exp) Exp {
						return apply(eq, apply(car, e), "eq")
					}),
					Func(func(...Exp) Exp {
						return apply(eq, apply(eval, apply(cadr, e), a), apply(eval, apply(caddr, e), a))
					}),
				}, []Exp{
					Func(func(...Exp) Exp {
						return apply(eq, apply(car, e), "plus")
					}),
					Func(func(...Exp) Exp {
						return apply(plus, apply(eval, apply(cadr, e), a), apply(eval, apply(caddr, e), a))
					}),
				}, []Exp{
					Func(func(...Exp) Exp {
						return apply(eq, apply(car, e), "minus")
					}),
					Func(func(...Exp) Exp {
						return apply(minus, apply(eval, apply(cadr, e), a), apply(eval, apply(caddr, e), a))
					}),
				}, []Exp{
					Func(func(...Exp) Exp {
						return apply(eq, apply(car, e), "mult")
					}),
					Func(func(...Exp) Exp {
						return apply(mult, apply(eval, apply(cadr, e), a), apply(eval, apply(caddr, e), a))
					}),
				}, []Exp{
					Func(func(...Exp) Exp {
						return apply(eq, apply(car, e), "after")
					}),
					Func(func(...Exp) Exp {
						return apply(after, apply(eval, apply(cadr, e), a), apply(eval, apply(caddr, e), a))
					}),
				}, []Exp{
					Func(func(...Exp) Exp {
						return apply(eq, apply(car, e), "display")
					}),
					Func(func(...Exp) Exp {
						return apply(display, apply(eval, apply(cadr, e), a))
					}),
				}, []Exp{
					Func(func(...Exp) Exp {
						return apply(eq, apply(car, e), "concat")
					}),
					Func(func(...Exp) Exp {
						return apply(concat, apply(eval, apply(cadr, e), a), apply(eval, apply(caddr, e), a))
					}),
				}, []Exp{
					Func(func(...Exp) Exp {
						return apply(eq, apply(car, e), "hash")
					}),
					Func(func(...Exp) Exp {
						return apply(hash, apply(eval, apply(cadr, e), a))
					}),
				}, []Exp{
					Func(func(...Exp) Exp {
						return apply(eq, apply(car, e), "newkey")
					}),
					Func(func(...Exp) Exp {
						return apply(newkey)
					}),
				}, []Exp{
					Func(func(...Exp) Exp {
						return apply(eq, apply(car, e), "pub")
					}),
					Func(func(...Exp) Exp {
						return apply(pub, apply(eval, apply(cadr, e), a))
					}),
				}, []Exp{
					Func(func(...Exp) Exp {
						return apply(eq, apply(car, e), "sign")
					}),
					Func(func(...Exp) Exp {
						return apply(sign, apply(eval, apply(cadr, e), a), apply(eval, apply(caddr, e), a))
					}),
				}, []Exp{
					Func(func(...Exp) Exp {
						return apply(eq, apply(car, e), "verify")
					}),
					Func(func(...Exp) Exp {
						return apply(verify, apply(eval, apply(cadr, e), a), apply(eval, apply(caddr, e), a), apply(eval, apply(cadddr, e), a))
					}),
				}, []Exp{
					Func(func(...Exp) Exp {
						return apply(eq, apply(car, e), "car")
					}),
					Func(func(...Exp) Exp {
						return apply(car, apply(eval, apply(cadr, e), a))
					}),
				}, []Exp{
					Func(func(...Exp) Exp {
						return apply(eq, apply(car, e), "cdr")
					}),
					Func(func(...Exp) Exp {
						return apply(cdr, apply(eval, apply(cadr, e), a))
					}),
				}, []Exp{
					Func(func(...Exp) Exp {
						return apply(eq, apply(car, e), "cons")
					}),
					Func(func(...Exp) Exp {
						return apply(cons, apply(eval, apply(cadr, e), a), apply(eval, apply(caddr, e), a))
					}),
				}, []Exp{
					Func(func(...Exp) Exp {
						return apply(eq, apply(car, e), "cond")
					}),
					Func(func(...Exp) Exp {
						return apply(evcon, apply(cdr, e), a)
					}),
				}, []Exp{
					Func(func(...Exp) Exp {
						return apply(eq, apply(car, e), "list")
					}),
					Func(func(...Exp) Exp {
						return apply(evlis, apply(cdr, e), a)
					}),
				}, []Exp{
					"t",
					Func(func(...Exp) Exp {
						return apply(eval, apply(cons, apply(assoc, apply(car, e), a), apply(cdr, e)), a)
					}),
				})
			}),
		},
		[]Exp{
			Func(func(...Exp) Exp {
				return apply(eq, apply(caar, e), "label")
			}),
			Func(func(...Exp) Exp {
				return apply(eval, apply(cons, apply(caddar, e), apply(cdr, e)), apply(cons, apply(list, apply(cadar, e), apply(car, e)), a))
			}),
		},
		[]Exp{
			Func(func(...Exp) Exp {
				return apply(eq, apply(caar, e), "lambda")
			}),
			Func(func(...Exp) Exp {
				return apply(cond, []Exp{
					Func(func(...Exp) Exp {
						return apply(atom, apply(cadar, e))
					}),
					Func(func(...Exp) Exp {
						return apply(eval, apply(caddar, e), apply(cons, apply(list, apply(cadar, e), apply(evlis, apply(cdr, e), a)), a))
					}),
				}, []Exp{
					"t",
					Func(func(...Exp) Exp {
						return apply(eval, apply(caddar, e), apply(append_go_sanitized, apply(pair, apply(cadar, e), apply(evlis, apply(cdr, e), a)), a))
					}),
				})
			}),
		},
	)
}

var evcon_label = []Exp{quote("label"), quote("evcon"), []Exp{quote("lambda"), []Exp{quote("c"), quote("a")}, []Exp{quote("cond"), []Exp{[]Exp{quote("eval"), []Exp{quote("caar"), quote("c")}, quote("a")}, []Exp{quote("eval"), []Exp{quote("cadar"), quote("c")}, quote("a")}}, []Exp{[]Exp{quote("quote"), quote("t")}, []Exp{quote("evcon"), []Exp{quote("cdr"), quote("c")}, quote("a")}}}}}

func evcon(args ...Exp) Exp {
	if err := checklen(2, args); err != nil {
		return err
	}
	c := args[0]
	a := args[1]
	return apply(
		cond,
		[]Exp{
			Func(func(...Exp) Exp {
				return apply(eval, apply(caar, c), a)
			}),
			Func(func(...Exp) Exp {
				return apply(eval, apply(cadar, c), a)
			}),
		},
		[]Exp{
			"t",
			Func(func(...Exp) Exp {
				return apply(evcon, apply(cdr, c), a)
			}),
		},
	)
}

var evlis_label = []Exp{quote("label"), quote("evlis"), []Exp{quote("lambda"), []Exp{quote("m"), quote("a")}, []Exp{quote("cond"), []Exp{[]Exp{quote("null"), quote("m")}, []Exp{quote("quote"), []Exp{}}}, []Exp{[]Exp{quote("quote"), quote("t")}, []Exp{quote("cons"), []Exp{quote("eval"), []Exp{quote("car"), quote("m")}, quote("a")}, []Exp{quote("evlis"), []Exp{quote("cdr"), quote("m")}, quote("a")}}}}}}

func evlis(args ...Exp) Exp {
	if err := checklen(2, args); err != nil {
		return err
	}
	m := args[0]
	a := args[1]
	return apply(
		cond,
		[]Exp{
			Func(func(...Exp) Exp {
				return apply(null, m)
			}),
			Nil,
		},
		[]Exp{
			"t",
			Func(func(...Exp) Exp {
				return apply(cons, apply(eval, apply(car, m), a), apply(evlis, apply(cdr, m), a))
			}),
		},
	)
}

var factorial_label = []Exp{quote("label"), quote("factorial"), []Exp{quote("lambda"), []Exp{quote("n")}, []Exp{quote("cond"), []Exp{[]Exp{quote("eq"), []Exp{quote("quote"), quote("0")}, quote("n")}, []Exp{quote("quote"), quote("1")}}, []Exp{[]Exp{quote("quote"), quote("t")}, []Exp{quote("mult"), quote("n"), []Exp{quote("factorial"), []Exp{quote("minus"), quote("n"), []Exp{quote("quote"), quote("1")}}}}}}}}

func factorial(args ...Exp) Exp {
	if err := checklen(1, args); err != nil {
		return err
	}
	n := args[0]
	return apply(
		cond,
		[]Exp{
			Func(func(...Exp) Exp {
				return apply(eq, "0", n)
			}),
			"1",
		},
		[]Exp{
			"t",
			Func(func(...Exp) Exp {
				return apply(mult, n, apply(factorial, apply(minus, n, "1")))
			}),
		},
	)
}

var length_label = []Exp{quote("label"), quote("length"), []Exp{quote("lambda"), []Exp{quote("x")}, []Exp{quote("cond"), []Exp{[]Exp{quote("atom"), quote("x")}, []Exp{quote("quote"), quote("0")}}, []Exp{[]Exp{quote("quote"), quote("t")}, []Exp{quote("plus"), []Exp{quote("quote"), quote("1")}, []Exp{quote("length"), []Exp{quote("cdr"), quote("x")}}}}}}}

func length(args ...Exp) Exp {
	if err := checklen(1, args); err != nil {
		return err
	}
	x := args[0]
	return apply(
		cond,
		[]Exp{
			Func(func(...Exp) Exp {
				return apply(atom, x)
			}),
			"0",
		},
		[]Exp{
			"t",
			Func(func(...Exp) Exp {
				return apply(plus, "1", apply(length, apply(cdr, x)))
			}),
		},
	)
}

var not_label = []Exp{quote("label"), quote("not"), []Exp{quote("lambda"), []Exp{quote("x")}, []Exp{quote("cond"), []Exp{quote("x"), []Exp{quote("quote"), []Exp{}}}, []Exp{[]Exp{quote("quote"), quote("t")}, []Exp{quote("quote"), quote("t")}}}}}

func not(args ...Exp) Exp {
	if err := checklen(1, args); err != nil {
		return err
	}
	x := args[0]
	return apply(
		cond,
		[]Exp{
			x,
			Nil,
		},
		[]Exp{
			"t",
			"t",
		},
	)
}

var null_label = []Exp{quote("label"), quote("null"), []Exp{quote("lambda"), []Exp{quote("x")}, []Exp{quote("eq"), quote("x"), []Exp{quote("quote"), []Exp{}}}}}

func null(args ...Exp) Exp {
	if err := checklen(1, args); err != nil {
		return err
	}
	x := args[0]
	return apply(
		eq,
		x,
		Nil,
	)
}

var pair_label = []Exp{quote("label"), quote("pair"), []Exp{quote("lambda"), []Exp{quote("x"), quote("y")}, []Exp{quote("cond"), []Exp{[]Exp{quote("and"), []Exp{quote("null"), quote("x")}, []Exp{quote("null"), quote("y")}}, []Exp{quote("quote"), []Exp{}}}, []Exp{[]Exp{quote("and"), []Exp{quote("not"), []Exp{quote("atom"), quote("x")}}, []Exp{quote("not"), []Exp{quote("atom"), quote("y")}}}, []Exp{quote("cons"), []Exp{quote("list"), []Exp{quote("car"), quote("x")}, []Exp{quote("car"), quote("y")}}, []Exp{quote("pair"), []Exp{quote("cdr"), quote("x")}, []Exp{quote("cdr"), quote("y")}}}}}}}

func pair(args ...Exp) Exp {
	if err := checklen(2, args); err != nil {
		return err
	}
	x := args[0]
	y := args[1]
	return apply(
		cond,
		[]Exp{
			Func(func(...Exp) Exp {
				return apply(and, apply(null, x), apply(null, y))
			}),
			Nil,
		},
		[]Exp{
			Func(func(...Exp) Exp {
				return apply(and, apply(not, apply(atom, x)), apply(not, apply(atom, y)))
			}),
			Func(func(...Exp) Exp {
				return apply(cons, apply(list, apply(car, x), apply(car, y)), apply(pair, apply(cdr, x), apply(cdr, y)))
			}),
		},
	)
}

var subst_label = []Exp{quote("label"), quote("subst"), []Exp{quote("lambda"), []Exp{quote("x"), quote("y"), quote("z")}, []Exp{quote("cond"), []Exp{[]Exp{quote("atom"), quote("z")}, []Exp{quote("cond"), []Exp{[]Exp{quote("eq"), quote("z"), quote("y")}, quote("x")}, []Exp{[]Exp{quote("quote"), quote("t")}, quote("z")}}}, []Exp{[]Exp{quote("quote"), quote("t")}, []Exp{quote("cons"), []Exp{quote("subst"), quote("x"), quote("y"), []Exp{quote("car"), quote("z")}}, []Exp{quote("subst"), quote("x"), quote("y"), []Exp{quote("cdr"), quote("z")}}}}}}}

func subst(args ...Exp) Exp {
	if err := checklen(3, args); err != nil {
		return err
	}
	x := args[0]
	y := args[1]
	z := args[2]
	return apply(
		cond,
		[]Exp{
			Func(func(...Exp) Exp {
				return apply(atom, z)
			}),
			Func(func(...Exp) Exp {
				return apply(cond, []Exp{
					Func(func(...Exp) Exp {
						return apply(eq, z, y)
					}),
					x,
				}, []Exp{
					"t",
					z,
				})
			}),
		},
		[]Exp{
			"t",
			Func(func(...Exp) Exp {
				return apply(cons, apply(subst, x, y, apply(car, z)), apply(subst, x, y, apply(cdr, z)))
			}),
		},
	)
}

var xlist_label = []Exp{quote("label"), quote("xlist"), []Exp{quote("lambda"), quote("x"), quote("x")}}

func xlist(args ...Exp) Exp {
	if err := checklen(1, args); err != nil {
		return err
	}
	x := args[0]
	return x
}

func init() {
	env = []Exp{
		[]Exp{"and", and_label},
		[]Exp{"append_go_sanitized", append_go_sanitized_label},
		[]Exp{"assoc", assoc_label},
		[]Exp{"caaaar", caaaar_label},
		[]Exp{"caaadr", caaadr_label},
		[]Exp{"caaar", caaar_label},
		[]Exp{"caadar", caadar_label},
		[]Exp{"caaddr", caaddr_label},
		[]Exp{"caadr", caadr_label},
		[]Exp{"caar", caar_label},
		[]Exp{"cadaar", cadaar_label},
		[]Exp{"cadadr", cadadr_label},
		[]Exp{"cadar", cadar_label},
		[]Exp{"caddar", caddar_label},
		[]Exp{"cadddr", cadddr_label},
		[]Exp{"caddr", caddr_label},
		[]Exp{"cadr", cadr_label},
		[]Exp{"cdaaar", cdaaar_label},
		[]Exp{"cdaadr", cdaadr_label},
		[]Exp{"cdaar", cdaar_label},
		[]Exp{"cdadar", cdadar_label},
		[]Exp{"cdaddr", cdaddr_label},
		[]Exp{"cdadr", cdadr_label},
		[]Exp{"cdar", cdar_label},
		[]Exp{"cddaar", cddaar_label},
		[]Exp{"cddadr", cddadr_label},
		[]Exp{"cddar", cddar_label},
		[]Exp{"cdddar", cdddar_label},
		[]Exp{"cddddr", cddddr_label},
		[]Exp{"cdddr", cdddr_label},
		[]Exp{"cddr", cddr_label},
		[]Exp{"eval", eval_label},
		[]Exp{"evcon", evcon_label},
		[]Exp{"evlis", evlis_label},
		[]Exp{"factorial", factorial_label},
		[]Exp{"length", length_label},
		[]Exp{"not", not_label},
		[]Exp{"null", null_label},
		[]Exp{"pair", pair_label},
		[]Exp{"subst", subst_label},
		[]Exp{"xlist", xlist_label},
	}
}
