(defun try (t e a) 
  (cond
   ((atom e) (assoc e a))
   ((atom (car e))
    (cond
     ((eq (car e) 'quote)   (cadr e))
     ((eq (car e) 'atom)    (atom    (try (next t) (cadr  e) a)))
     ((eq (car e) 'eq)      (eq      (try (next t) (cadr  e) a)
			             (try (next t) (caddr e) a)))
     ((eq (car e) 'car)     (car     (try (next t) (cadr  e) a)))
     ((eq (car e) 'cdr)     (cdr     (try (next t) (cadr  e) a)))
     ((eq (car e) 'cons)    (cons    (try (next t) (cadr  e) a)
			             (try (next t) (caddr e) a)))
     ((eq (car e) 'cond)    (evcon   (cdr e) a))
     ((eq (car e) 'list)    (evlis   (cdr e) a))
     ('t (try (next t) (cons (tassoc (next t) (car e) a)
		     (cdr e))
	       a))))
   ((eq (caar e) 'label)
    (try (next t) (cons (caddar e) (cdr e))
	  (cons (list (cadar e) (car e)) a)))
   ((eq (caar e) 'lambda)
    (try (next t) (caddar e)
	  (append (pair (cadar e) (evlis (cdr e) a))
		  a)))))
