design doc:

tokens are mined, and assigned to keys, which are used for signing.
all services are paid for, so no free-riding or mooching, since tokens
are obtainable by everyone.

blockchain sharded on keyspace, each chain only handles transactions
signed by its assigned keys.  chains becomes a lattice via cross-chain
references, not just intra-chain as in traditional
blockchain. sharding events are voted upon with tokens.

transactions involve token transfers, as well as shared data structure
updates. data stored as merkle trie, and each name (path in trie)
belongs to one key, the one who's transaction created it.  in case of
cross-chain conflict of new names, choose winner lexically by tx fee
and other features.  some parts of trie namespace are for system admin
(like key balances, blocks, etc.), whereas others are free for
user-defined purposes, like url's.

as with crdt's, trie's from different chains are merely merged by
hierarchically considering updates from their lattice meet.
verification only takes place along chains, not across them.

there can be counter crdt's for merging key balances in the data store.

there is constant mining, but explicit depreciation for tokens, with
time constant something like a month or year. thus, tokens must be
used, cannot store value by definition. so this is not a
cryptocurrency, but rather, tokens are more like transient cookies.

tor-like communication services for safety, by default.  like
everything else in this platform, it is paid for with tokens.

mining frequency is one hertz, per chain. upon scaling, it splits into
two key spaces, half the difficulty and half the block reward,
vice-versa for de-scaling.

should have a script language for transaction processing.

trie is a stand-in for state of blockchain. thus, to check
a block, miners must simply arrive at the same state hash.

in trie, register a receipt from transaction output,
to enforce processing.

content parts of transactions also need validation scripts,
to enforce who can update already-existing content.


problems:

how does depreciation work within lattice joins? for off-chain
transfers, collect up transfers in transactions and when they
arrive at home chains, collect up balances there. so source
chain decides on depreciation amount, target chain incorporates
that into balance. again, this is a kind of counter crdt.

meet algorithm: each block references a data structure containing all
child blocks, thus to find meet do a breadth-first traversal of one
block's child lattice, identifying the first common block as the meet.

signing transactions: just sign the whole blob, which can't contain the
signature in a script. use the signature as a runtime parameter of script,
not embed it literally. 

important to have an oversight and strategy functionality, which also
monitors and reports on objectionable content of different types, such
as porn, violence, etc... this would not be censorship in any sense of
the word (as censorship per se is not technically nor organizationally
possible), but merely a community moderation service, of which there
could be many.  for instance, comprised of a first-line "defense"
using algorithms to detect such media, like text, photographs, or
videos. then a second-line of human review, and finally a third-line of
"appeal". such a service could publish lists of such content id's to
be voluntarily followed by concerned users of the system. the oversight
groups should also publish ways they can be contacted, and be receptive
to unsolicited reports that thus come in to their attention.

